# QR-bot stack — Compose v2
# ---------------------------------------------------------------------

networks:
  qr_net: {}                       # внутренняя изоляция
  caddy_net:                       # создаёт Caddy-стек
    external: true

# export QR_IMAGE_TAG=abcd123 ⇒ образ qr-bot-almaz:abcd123
# если переменная не задана — берётся latest
x-qr-image: &qr_image
  image: "qr-bot-almaz:${QR_IMAGE_TAG:-latest}"
  env_file: [.env]
  environment:
    - PYTHONPATH=/app
  restart: unless-stopped
  networks: [qr_net]
  deploy:
    resources:
      limits: {cpus: "0.50", memory: "256M"}

# ---------------------------------------------------------------------
services:
  # ---------- WEB (Flask + Gunicorn) ----------------------------------
  web:
    <<: *qr_image
    build: .                       # образ собирается ОДИН раз
    container_name: qrbot_web      # для CI-workflow
    command: >
      gunicorn -w 2 -k gthread -t 30
      -b 0.0.0.0:8080 web.main:app
    expose: ["8080"]
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks: [qr_net, caddy_net]

  # ---------- BOT (Telegram-bot) --------------------------------------
  bot:
    <<: *qr_image
    command: python -u bot/bot.py
    volumes:
      - ./:/app 
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f bot/bot.py || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  # ---------- TAMAGOTCHI scheduler (ОТКЛЮЧЕН) ----------------------
  # tamagotchi_scheduler:
  #   <<: *qr_image
  #   command: python -u schedulers/tamagotchi_scheduler.py
  #   healthcheck:
  #     test: ["CMD-SHELL", "pgrep -f tamagotchi_scheduler.py || exit 1"]
  #     interval: 60s
  #     timeout: 5s
  #     retries: 3

  # ---------- AUTO-CLOSE scheduler ------------------------------------
  auto_close_scheduler:
    <<: *qr_image
    command: python -u schedulers/auto_close_scheduler.py
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f auto_close_scheduler.py || exit 1"]
      interval: 60s
      timeout: 5s
      retries: 3
