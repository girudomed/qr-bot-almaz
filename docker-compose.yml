# QR-bot stack — Compose v2 (version: не нужен)

# ── Сети ───────────────────────────────────────────────────────────────
networks:
  qr_net: {}                       # bridge по-умолчанию
  caddy_net:
    external: true                 # создаёт Caddy-стек

# ── Якорь без build (общие параметры) ──────────────────────────────────
x-qr-image: &qr_image
  image: qr-bot-almaz:latest       # образ, который соберёт web
  env_file: [.env]
  restart: unless-stopped
  networks: [qr_net]

# ── Сервисы ────────────────────────────────────────────────────────────
services:
  # ---------- WEB (Flask + Gunicorn) -----------------------------------
  web:
    <<: *qr_image
    build: .                       # ← build теперь только здесь!
    command: >
      gunicorn -w 2 -k gthread -t 30 -b 0.0.0.0:8080 web.main:app
    expose: ["8080"]               # порт доступен лишь внутри сетей
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:                      # + прокси-сеть для Caddy
      - qr_net
      - caddy_net
    # если Caddy обращается к web по имени контейнера — раскомментируйте:
    # container_name: qrbot_web

  # ---------- BOT (Telegram-бот) --------------------------------------
  bot:
    <<: *qr_image
    command: python -u bot/bot.py

  # ---------- TAMAGOTCHI scheduler -------------------------------------
  tamagotchi_scheduler:
    <<: *qr_image
    command: python -u schedulers/tamagotchi_scheduler.py

  # ---------- AUTO-CLOSE scheduler -------------------------------------
  auto_close_scheduler:
    <<: *qr_image
    command: python -u schedulers/auto_close_scheduler.py