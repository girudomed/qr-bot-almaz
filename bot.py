#bot.py
import os
import json
import base64
import hmac
import hashlib
import logging
from datetime import datetime, timezone, timedelta
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
# ‚îÄ‚îÄ TEMP PATCH: Supabase vs httpx>=0.25  (—É–¥–∞–ª–∏—Ç—å, –∫–æ–≥–¥–∞ supabase-py –ø–æ—á–∏–Ω—è—Ç) ‚îÄ‚îÄ
# ‚îÄ‚îÄ TEMP PATCH: supabase-py (‚â§2.16) vs httpx (‚â•0.25) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
import httpx, functools

def _patch(cls):
    orig_init = cls.__init__            # ¬´–∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º¬ª —Å—Å—ã–ª–∫—É

    @functools.wraps(orig_init)
    def _wrap(self, *args, **kw):
        if "proxy" in kw and "proxies" not in kw:      # –º–µ–Ω—è–µ–º –∫–ª—é—á
            kw["proxies"] = kw.pop("proxy")
        return orig_init(self, *args, **kw)

    cls.__init__ = _wrap

for _c in (httpx.Client, httpx.AsyncClient):
    _patch(_c)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from supabase import create_client, Client
from PIL import Image
from pyzbar.pyzbar import decode

# –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)
MOSCOW_TZ = timezone(timedelta(hours=3))

def get_moscow_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ"""
    return datetime.now(MOSCOW_TZ)

def get_moscow_timestamp():
    """–ü–æ–ª—É—á–∏—Ç—å timestamp –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    return int(get_moscow_time().timestamp())

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s %(levelname)s %(message)s', level=logging.INFO
)

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
QR_SECRET = os.environ.get("QR_SECRET")
SUPABASE_URL = os.environ.get("NEXT_PUBLIC_SUPABASE_URL")
SUPABASE_KEY = os.environ.get("NEXT_PUBLIC_SUPABASE_ANON_KEY")

if not all([TELEGRAM_TOKEN, QR_SECRET, SUPABASE_URL, SUPABASE_KEY]):
    raise Exception("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase!")

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

def verify_signature(branch_id, time_window, signature):
    msg = f"{branch_id}:{time_window}".encode()
    secret = QR_SECRET.encode()
    expected = hmac.new(secret, msg, hashlib.sha256).hexdigest()
    return hmac.compare_digest(signature, expected)

from telegram import InlineKeyboardMarkup, InlineKeyboardButton

ADMIN_USERNAME = "gayazking"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    first_name = getattr(user, "first_name", "")
    last_name = getattr(user, "last_name", "")
    username = getattr(user, "username", "")
    chat_id = update.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ users –∏ –æ–¥–æ–±—Ä–µ–Ω –ª–∏ –æ–Ω
    user_query = supabase.table("users").select("*").eq("telegram_id", user_id).execute()
    user_data = user_query.data[0] if user_query.data and len(user_query.data) > 0 else None

    # –ï—Å–ª–∏ —ç—Ç–æ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–æ username), –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º/—Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å
    if username == ADMIN_USERNAME:
        if not user_data:
            supabase.table("users").insert({
                "telegram_id": user_id,
                "first_name": first_name,
                "last_name": last_name,
                "username": username,
                "chat_id": chat_id,
                "status": "approved",
                "role": "superuser",
                "is_superuser": True,
                "can_approve_registrations": True
            }).execute()
        else:
            supabase.table("users").update({
                "first_name": first_name,
                "last_name": last_name,
                "chat_id": chat_id,
                "status": "approved",
                "role": "superuser",
                "is_superuser": True,
                "can_approve_registrations": True
            }).eq("telegram_id", user_id).execute()
        
        # –ú–µ–Ω—é –¥–ª—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from telegram import ReplyKeyboardMarkup, KeyboardButton
        keyboard = ReplyKeyboardMarkup([
            ["üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìã –ú–µ–Ω—é"],
            ["üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "‚ùì –ü–æ–º–æ—â—å"]
        ], resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.",
            reply_markup=keyboard
        )
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –∏ –æ–¥–æ–±—Ä–µ–Ω
    if user_data and user_data.get("status") == "approved":
        from telegram import ReplyKeyboardMarkup, KeyboardButton
        keyboard = ReplyKeyboardMarkup([
            ["üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìã –ú–µ–Ω—é"],
            ["‚ùì –ü–æ–º–æ—â—å"]
        ], resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ú–æ–∂–µ—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é.",
            reply_markup=keyboard
        )
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –Ω–æ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω
    if user_data and user_data.get("status") == "pending":
        await update.message.reply_text("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    if user_data and user_data.get("status") == "declined":
        await update.message.reply_text("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    from telegram import ReplyKeyboardMarkup, KeyboardButton
    keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text(
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=keyboard
    )

async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    first_name = getattr(user, "first_name", "")
    last_name = getattr(user, "last_name", "")
    username = getattr(user, "username", "")
    chat_id = update.message.chat.id
    phone = update.message.contact.phone_number if update.message.contact else None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ users
    user_query = supabase.table("users").select("*").eq("telegram_id", user_id).execute()
    user_data = user_query.data[0] if user_query.data and len(user_query.data) > 0 else None

    if user_data:
        await update.message.reply_text("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
    supabase.table("users").insert({
        "telegram_id": user_id,
        "first_name": first_name,
        "last_name": last_name,
        "username": username,
        "phone": phone,
        "chat_id": chat_id,
        "status": "pending",
        "role": "user"
    }).execute()

    # –ù–∞–π—Ç–∏ chat_id –∞–¥–º–∏–Ω–∞ (–ø–æ username)
    admin_query = supabase.table("users").select("*").eq("username", ADMIN_USERNAME).execute()
    admin = admin_query.data[0] if admin_query.data and len(admin_query.data) > 0 else None
    admin_chat_id = admin["chat_id"] if admin and admin.get("chat_id") else None

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{user_id}")
        ]
    ])
    if admin_chat_id and admin_chat_id != 0:
        await context.bot.send_message(
            chat_id=admin_chat_id,
            text=f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n"
                 f"–ò–º—è: {first_name}\n"
                 f"–§–∞–º–∏–ª–∏—è: {last_name}\n"
                 f"Username: @{username}\n"
                 f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                 f"Telegram ID: {user_id}\n"
                 f"chat_id: {chat_id}",
            reply_markup=keyboard
        )
        await update.message.reply_text("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    else:
        await update.message.reply_text(
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. "
            "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (username: gayazking) –∑–∞–ø—É—Å—Ç–∏—Ç—å /start –≤ —ç—Ç–æ–º –±–æ—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫."
        )

async def get_last_event_type(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        result = supabase.table("time_events").select("event_type").eq("telegram_id", user_id).order("event_time", desc=True).limit(1).execute()
        if result.data and len(result.data) > 0:
            return result.data[0]["event_type"]
        return None
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è:")
        return None

async def get_last_arrival_branch(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–ª–∏–∞–ª –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞ –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —É—Ö–æ–¥–∞"""
    try:
        result = supabase.table("time_events").select("*").eq("telegram_id", user_id).eq("event_type", "arrival").order("event_time", desc=True).limit(1).execute()
        if result.data and len(result.data) > 0:
            arrival_event = result.data[0]
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Å–æ–±—ã—Ç–∏–µ —É—Ö–æ–¥–∞ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞
            departure_result = supabase.table("time_events").select("*").eq("telegram_id", user_id).eq("event_type", "departure").gt("event_time", arrival_event["event_time"]).limit(1).execute()
            if not departure_result.data:
                return arrival_event["branch_id"]
        return None
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞:")
        return None

async def check_user_authorization(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_query = supabase.table("users").select("*").eq("telegram_id", user_id).execute()
        user_data = user_query.data[0] if user_query.data and len(user_query.data) > 0 else None
        return user_data and user_data.get("status") == "approved"
    except Exception:
        return False

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if not await check_user_authorization(user_id):
        await update.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π.")
        return
    
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞
    last_event_type = await get_last_event_type(user_id)
    status_text = ""
    if last_event_type == "arrival":
        status_text = "üü¢ –°—Ç–∞—Ç—É—Å: –ù–∞ —Ä–∞–±–æ—Ç–µ"
    elif last_event_type == "departure":
        status_text = "üî¥ –°—Ç–∞—Ç—É—Å: –ù–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ"
    else:
        status_text = "‚ö™ –°—Ç–∞—Ç—É—Å: –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π"
    
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_stats"),
            InlineKeyboardButton("üìã –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="menu_status")
        ],
        [
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help"),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="menu_refresh")
        ]
    ])
    
    await update.message.reply_text(
        f"üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n{status_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

async def handle_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–º–æ—â–∏"""
    help_text = """
‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏**

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–∏—Å—Ç–µ–º–æ–π:**

üîπ **–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞:**
   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
   ‚Ä¢ –ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç QR-–∫–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ

üîπ **–õ–æ–≥–∏–∫–∞ –ø—Ä–∏—Ö–æ–¥–∞/—É—Ö–æ–¥–∞:**
   ‚Ä¢ –ü–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ç–æ–ª—å–∫–æ "–ü—Ä–∏—à–µ–ª"
   ‚Ä¢ –ü–æ—Å–ª–µ –ø—Ä–∏—Ö–æ–¥–∞ - —Ç–æ–ª—å–∫–æ "–£—à–µ–ª"
   ‚Ä¢ –£—Ö–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ —Å —Ç–æ–≥–æ –∂–µ —Ñ–∏–ª–∏–∞–ª–∞

üîπ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–Ω—è–º
   ‚Ä¢ –û—Ç–º–µ—Ç–∫–∏ –æ–± –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–∏

üîπ **–ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ:**
   ‚Ä¢ –ï—Å–ª–∏ –Ω–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ —É—Ö–æ–¥ –¥–æ 21:00
   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç –¥–µ–Ω—å
   ‚Ä¢ –ë—É–¥–µ—Ç —É—á—Ç–µ–Ω–æ 8 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ—Ç—á–µ—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
‚Ä¢ üìã –ú–µ–Ω—é - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ ‚ùì –ü–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def handle_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    username = getattr(update.message.from_user, "username", "")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if username != ADMIN_USERNAME:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_result = supabase.table("users").select("*").execute()
    total_users = len(users_result.data) if users_result.data else 0
    pending_users = len([u for u in users_result.data if u.get("status") == "pending"]) if users_result.data else 0
    approved_users = len([u for u in users_result.data if u.get("status") == "approved"]) if users_result.data else 0
    admins = len([u for u in users_result.data if u.get("role") == "admin"]) if users_result.data else 0
    
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üìä LIVE Dashboard", callback_data="admin_dashboard"),
            InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="admin_admins"),
            InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", callback_data="admin_stats")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
        ]
    ])
    
    admin_text = f"""
üëë **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**

üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {pending_users}
‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö: {approved_users}
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admins}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    await update.message.reply_text(admin_text, reply_markup=keyboard, parse_mode='Markdown')

async def handle_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if not await check_user_authorization(user_id):
        await update.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π.")
        return
    
    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üìÖ 3 –¥–Ω—è", callback_data="stats_3"),
            InlineKeyboardButton("üìÖ 7 –¥–Ω–µ–π", callback_data="stats_7")
        ],
        [
            InlineKeyboardButton("üìÖ 14 –¥–Ω–µ–π", callback_data="stats_14"),
            InlineKeyboardButton("üìÖ 30 –¥–Ω–µ–π", callback_data="stats_30")
        ]
    ])
    await update.message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
        reply_markup=keyboard
    )

async def generate_statistics_report(user_id, days):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from datetime import timedelta
    
    try:
        # –ü–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days)
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥
        events_result = supabase.table("time_events").select("*").eq("telegram_id", user_id).gte("event_time", start_date.isoformat()).lte("event_time", end_date.isoformat()).order("event_time", desc=False).execute()
        
        if not events_result.data:
            return f"üìä –û—Ç—á–µ—Ç –∑–∞ {days} –¥–Ω–µ–π\n\n–î–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        events = events_result.data
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º
        daily_stats = {}
        total_hours = 0
        
        for event in events:
            event_date = datetime.fromisoformat(event["event_time"]).date()
            date_str = event_date.strftime("%d.%m.%Y")
            
            if date_str not in daily_stats:
                daily_stats[date_str] = {
                    "arrival": None,
                    "departure": None,
                    "branch_name": None,
                    "hours": 0,
                    "auto_closed": False
                }
            
            if event["event_type"] == "arrival":
                daily_stats[date_str]["arrival"] = datetime.fromisoformat(event["event_time"])
                daily_stats[date_str]["branch_name"] = event["branch_name"]
            elif event["event_type"] == "departure":
                daily_stats[date_str]["departure"] = datetime.fromisoformat(event["event_time"])
                if event.get("work_hours"):
                    daily_stats[date_str]["hours"] = float(event["work_hours"])
                    total_hours += daily_stats[date_str]["hours"]
                if event.get("is_auto_closed"):
                    daily_stats[date_str]["auto_closed"] = True
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = f"üìä –û—Ç—á–µ—Ç –∑–∞ {days} –¥–Ω–µ–π\n"
        report += f"–ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n\n"
        
        if not daily_stats:
            report += "–î–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            return report
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        sorted_dates = sorted(daily_stats.keys(), key=lambda x: datetime.strptime(x, "%d.%m.%Y"), reverse=True)
        
        for date_str in sorted_dates:
            day_data = daily_stats[date_str]
            report += f"üìÖ {date_str}\n"
            
            if day_data["branch_name"]:
                report += f"üè¢ –§–∏–ª–∏–∞–ª: {day_data['branch_name']}\n"
            
            if day_data["arrival"]:
                report += f"üü¢ –ü—Ä–∏—Ö–æ–¥: {day_data['arrival'].strftime('%H:%M')}\n"
            else:
                report += "üü¢ –ü—Ä–∏—Ö–æ–¥: –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω\n"
            
            if day_data["departure"]:
                auto_text = " (–∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ)" if day_data["auto_closed"] else ""
                report += f"üî¥ –£—Ö–æ–¥: {day_data['departure'].strftime('%H:%M')}{auto_text}\n"
            else:
                report += "üî¥ –£—Ö–æ–¥: –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω\n"
            
            if day_data["hours"] > 0:
                report += f"‚è± –ß–∞—Å–æ–≤: {day_data['hours']}\n"
            else:
                report += "‚è± –ß–∞—Å–æ–≤: 0\n"
            
            report += "\n"
        
        report += f"üìà –ò—Ç–æ–≥–æ —á–∞—Å–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: {total_hours}\n"
        report += f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {round(total_hours / len([d for d in daily_stats.values() if d['hours'] > 0]) if any(d['hours'] > 0 for d in daily_stats.values()) else 0, 2)}"
        
        return report
        
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

async def handle_qr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user = update.message.from_user
    user_id = user.id
    first_name = getattr(user, "first_name", "")
    last_name = getattr(user, "last_name", "")
    username = getattr(user, "username", "")
    chat_id = update.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    if text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await handle_statistics(update, context)
        return
    elif text == "üìã –ú–µ–Ω—é":
        await handle_menu(update, context)
        return
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await handle_help(update, context)
        return
    elif text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
        await handle_admin_panel(update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await check_user_authorization(user_id):
        await update.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    if not text.startswith("/qr_"):
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ QR-–∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ.")
        return

    base64_data = text[len("/qr_"):]
    try:
        json_str = base64.urlsafe_b64decode(base64_data.encode()).decode()
        data = json.loads(json_str)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è QR:")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤ QR-–∫–æ–¥–µ (–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ).")
        return

    branch_id = data.get("branch_id")
    branch_name = data.get("branch_name")
    timestamp = data.get("timestamp")
    expires = data.get("expires")
    signature = data.get("signature")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    if not verify_signature(branch_id, timestamp, signature):
        await update.message.reply_text("QR-–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (–æ—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏).")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è (60 —Å–µ–∫—É–Ω–¥) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    now_ts = get_moscow_timestamp()
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–ú–°–ö): —Ç–µ–∫—É—â–µ–µ={now_ts}, –∏—Å—Ç–µ–∫–∞–µ—Ç={expires}, —Ä–∞–∑–Ω–∏—Ü–∞={now_ts - expires}")
    logging.info(f"QR –¥–∞–Ω–Ω—ã–µ: branch_id={branch_id}, timestamp={timestamp}, expires={expires}, signature={signature}")
    
    if now_ts > expires:
        await update.message.reply_text(f"–≠—Ç–æ—Ç QR-–∫–æ–¥ —É–∂–µ –∏—Å—Ç—ë–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–°–ö): {now_ts}, –∫–æ–¥ –∏—Å—Ç—ë–∫: {expires}, —Ä–∞–∑–Ω–∏—Ü–∞: {now_ts - expires} —Å–µ–∫")
        return

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ QR –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data['pending_qr'] = {
        "telegram_id": user_id,
        "first_name": first_name,
        "last_name": last_name,
        "username": username,
        "chat_id": chat_id,
        "branch_id": branch_id,
        "branch_name": branch_name,
        "event_time": get_moscow_time().isoformat(),
        "qr_timestamp": timestamp,
        "signature": signature,
        "raw_json": json.dumps(data, ensure_ascii=False)
    }

    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–∑–º–æ–∂–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    last_event_type = await get_last_event_type(user_id)
    
    if last_event_type is None:
        # –ü–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ - —Ç–æ–ª—å–∫–æ –ø—Ä–∏—Ö–æ–¥
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üü¢ –ü—Ä–∏—à–µ–ª", callback_data="event_arrival")]
        ])
        await update.message.reply_text(
            f"QR-–∫–æ–¥ —Ñ–∏–ª–∏–∞–ª–∞ '{branch_name}' —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:",
            reply_markup=keyboard
        )
    elif last_event_type == "departure":
        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ - —É—Ö–æ–¥, –∑–Ω–∞—á–∏—Ç —Å–ª–µ–¥—É—é—â–µ–µ - –ø—Ä–∏—Ö–æ–¥
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üü¢ –ü—Ä–∏—à–µ–ª", callback_data="event_arrival")]
        ])
        await update.message.reply_text(
            f"QR-–∫–æ–¥ —Ñ–∏–ª–∏–∞–ª–∞ '{branch_name}' —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:",
            reply_markup=keyboard
        )
    elif last_event_type == "arrival":
        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ - –ø—Ä–∏—Ö–æ–¥, –∑–Ω–∞—á–∏—Ç —Å–ª–µ–¥—É—é—â–µ–µ - —É—Ö–æ–¥
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Ñ–∏–ª–∏–∞–ª —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ñ–∏–ª–∏–∞–ª–æ–º –ø—Ä–∏—Ö–æ–¥–∞
        last_arrival_branch = await get_last_arrival_branch(user_id)
        if last_arrival_branch and last_arrival_branch != branch_id:
            # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ –ø—Ä–∏—Ö–æ–¥–∞
            branches_result = supabase.table("branches").select("name").eq("id", last_arrival_branch).execute()
            arrival_branch_name = branches_result.data[0]["name"] if branches_result.data else f"—Ñ–∏–ª–∏–∞–ª {last_arrival_branch}"
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: –í—ã –ø—Ä–∏—à–ª–∏ –≤ —Ñ–∏–ª–∏–∞–ª '{arrival_branch_name}', –ø–æ—ç—Ç–æ–º—É —É—Ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω —Å QR-–∫–æ–¥–∞ —Ç–æ–≥–æ –∂–µ —Ñ–∏–ª–∏–∞–ª–∞.\n\n"
                f"–¢–µ–∫—É—â–∏–π QR-–∫–æ–¥ –æ—Ç —Ñ–∏–ª–∏–∞–ª–∞ '{branch_name}' –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —É—Ö–æ–¥–∞."
            )
            return
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üî¥ –£—à–µ–ª", callback_data="event_departure")]
        ])
        await update.message.reply_text(
            f"QR-–∫–æ–¥ —Ñ–∏–ª–∏–∞–ª–∞ '{branch_name}' —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:",
            reply_markup=keyboard
        )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        return
    photo_file = await update.message.photo[-1].get_file()
    photo_path = "temp_qr.jpg"
    await photo_file.download_to_drive(photo_path)
    try:
        img = Image.open(photo_path)
        decoded = decode(img)
        if not decoded:
            await update.message.reply_text("QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Ñ–æ—Ç–æ.")
            return
        qr_data = decoded[0].data.decode("utf-8")
        # –ï—Å–ª–∏ QR-–∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫—É /qr_, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
        if qr_data.startswith("/qr_"):
            # –í–º–µ—Å—Ç–æ –ø–æ–¥–º–µ–Ω—ã message —Å–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –∏ –º–µ—Ç–æ–¥–æ–º reply_text
            class FakeUser:
                def __init__(self, orig):
                    self.id = orig.id
                    self.first_name = getattr(orig, "first_name", "")
                    self.last_name = getattr(orig, "last_name", "")
                    self.username = getattr(orig, "username", "")
            class FakeMessage:
                def __init__(self, orig, text):
                    self.text = text
                    self.from_user = FakeUser(orig.from_user)
                    self.chat = orig.chat
                    self.chat_id = orig.chat.id if hasattr(orig.chat, "id") else None
                    self.message_id = orig.message_id
                    self._orig = orig  # –¥–ª—è reply_text
                async def reply_text(self, text, reply_markup=None):
                    await self._orig.reply_text(text, reply_markup=reply_markup)
            class FakeUpdate:
                def __init__(self, orig, text):
                    self.message = FakeMessage(orig.message, text)
            fake_update = FakeUpdate(update, qr_data)
            await handle_qr(fake_update, context)
        else:
            await update.message.reply_text("QR-–∫–æ–¥ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞.")
    finally:
        try:
            import os
            os.remove(photo_path)
        except Exception:
            pass

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.CONTACT, contact_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_qr))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    async def calculate_work_hours(arrival_time, departure_time):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤"""
        try:
            if isinstance(arrival_time, str):
                arrival_time = datetime.fromisoformat(arrival_time.replace('Z', '+00:00'))
            if isinstance(departure_time, str):
                departure_time = datetime.fromisoformat(departure_time.replace('Z', '+00:00'))
            
            delta = departure_time - arrival_time
            hours = delta.total_seconds() / 3600
            return round(hours, 2)
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤:")
            return 0.0

    async def get_last_arrival_event(user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏—Ö–æ–¥–∞ –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —É—Ö–æ–¥–∞"""
        try:
            result = supabase.table("time_events").select("*").eq("telegram_id", user_id).eq("event_type", "arrival").order("event_time", desc=True).limit(1).execute()
            if result.data and len(result.data) > 0:
                arrival_event = result.data[0]
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Å–æ–±—ã—Ç–∏–µ —É—Ö–æ–¥–∞ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞
                departure_result = supabase.table("time_events").select("*").eq("telegram_id", user_id).eq("event_type", "departure").gt("event_time", arrival_event["event_time"]).limit(1).execute()
                if not departure_result.data:
                    return arrival_event
            return None
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞:")
            return None

    # Callback handler –¥–ª—è –∫–Ω–æ–ø–æ–∫
    async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        data = query.data
        user_id = query.from_user.id

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
        if data.startswith("menu_"):
            action = data.split("_")[1]
            if action == "stats":
                keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("üìÖ 3 –¥–Ω—è", callback_data="stats_3"),
                        InlineKeyboardButton("üìÖ 7 –¥–Ω–µ–π", callback_data="stats_7")
                    ],
                    [
                        InlineKeyboardButton("üìÖ 14 –¥–Ω–µ–π", callback_data="stats_14"),
                        InlineKeyboardButton("üìÖ 30 –¥–Ω–µ–π", callback_data="stats_30")
                    ]
                ])
                await query.edit_message_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:", reply_markup=keyboard)
            elif action == "help":
                help_text = """
‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏**

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–∏—Å—Ç–µ–º–æ–π:**

üîπ **–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞:**
   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
   ‚Ä¢ –ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç QR-–∫–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ

üîπ **–õ–æ–≥–∏–∫–∞ –ø—Ä–∏—Ö–æ–¥–∞/—É—Ö–æ–¥–∞:**
   ‚Ä¢ –ü–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ç–æ–ª—å–∫–æ "–ü—Ä–∏—à–µ–ª"
   ‚Ä¢ –ü–æ—Å–ª–µ –ø—Ä–∏—Ö–æ–¥–∞ - —Ç–æ–ª—å–∫–æ "–£—à–µ–ª"
   ‚Ä¢ –£—Ö–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ —Å —Ç–æ–≥–æ –∂–µ —Ñ–∏–ª–∏–∞–ª–∞

üîπ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–Ω—è–º
   ‚Ä¢ –û—Ç–º–µ—Ç–∫–∏ –æ–± –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–∏

üîπ **–ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ:**
   ‚Ä¢ –ï—Å–ª–∏ –Ω–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ —É—Ö–æ–¥ –¥–æ 21:00
   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç –¥–µ–Ω—å
   ‚Ä¢ –ë—É–¥–µ—Ç —É—á—Ç–µ–Ω–æ 8 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ—Ç—á–µ—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
‚Ä¢ üìã –ú–µ–Ω—é - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ ‚ùì –ü–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
                """
                await query.edit_message_text(help_text, parse_mode='Markdown')
            elif action == "status":
                last_event_type = await get_last_event_type(user_id)
                if last_event_type == "arrival":
                    status_text = "üü¢ –°—Ç–∞—Ç—É—Å: –ù–∞ —Ä–∞–±–æ—Ç–µ"
                elif last_event_type == "departure":
                    status_text = "üî¥ –°—Ç–∞—Ç—É—Å: –ù–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ"
                else:
                    status_text = "‚ö™ –°—Ç–∞—Ç—É—Å: –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π"
                await query.edit_message_text(f"üìã –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n\n{status_text}")
            elif action == "refresh":
                # –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é
                last_event_type = await get_last_event_type(user_id)
                if last_event_type == "arrival":
                    status_text = "üü¢ –°—Ç–∞—Ç—É—Å: –ù–∞ —Ä–∞–±–æ—Ç–µ"
                elif last_event_type == "departure":
                    status_text = "üî¥ –°—Ç–∞—Ç—É—Å: –ù–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ"
                else:
                    status_text = "‚ö™ –°—Ç–∞—Ç—É—Å: –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π"
                
                keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_stats"),
                        InlineKeyboardButton("üìã –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="menu_status")
                    ],
                    [
                        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help"),
                        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="menu_refresh")
                    ]
                ])
                await query.edit_message_text(f"üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n{status_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if data.startswith("stats_"):
            days = int(data.split("_")[1])
            report = await generate_statistics_report(user_id, days)
            await query.edit_message_text(report)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏—Ö–æ–¥–∞/—É—Ö–æ–¥–∞
        if data.startswith("event_"):
            event_type = data.split("_")[1]  # arrival –∏–ª–∏ departure
            
            # –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ QR
            pending_qr = context.user_data.get('pending_qr')
            if not pending_qr:
                await query.edit_message_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∑–∞–Ω–æ–≤–æ.")
                return

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            event_data = pending_qr.copy()
            event_data["event_type"] = event_type
            
            # –ï—Å–ª–∏ —ç—Ç–æ —É—Ö–æ–¥, —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã
            work_hours = None
            if event_type == "departure":
                last_arrival = await get_last_arrival_event(user_id)
                if last_arrival:
                    work_hours = await calculate_work_hours(last_arrival["event_time"], event_data["event_time"])
                    event_data["work_hours"] = work_hours

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑—É
            try:
                res = supabase.table("time_events").insert(event_data).execute()
                if res.data:
                    if event_type == "arrival":
                        message = f"‚úÖ –ü—Ä–∏—Ö–æ–¥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!\n–§–∏–ª–∏–∞–ª: {pending_qr['branch_name']}\n–í—Ä–µ–º—è: {datetime.fromisoformat(pending_qr['event_time']):%d.%m.%Y %H:%M:%S} UTC"
                    else:
                        hours_text = f"\n–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Å–æ–≤: {work_hours}" if work_hours else ""
                        message = f"‚úÖ –£—Ö–æ–¥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!\n–§–∏–ª–∏–∞–ª: {pending_qr['branch_name']}\n–í—Ä–µ–º—è: {datetime.fromisoformat(pending_qr['event_time']):%d.%m.%Y %H:%M:%S} UTC{hours_text}"
                    
                    await query.edit_message_text(message)
                    # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    context.user_data.pop('pending_qr', None)
                else:
                    await query.edit_message_text("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            except Exception as e:
                logging.exception("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏—è:")
                await query.edit_message_text("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        if data.startswith("admin_"):
            admin_user = query.from_user
            if admin_user.username != ADMIN_USERNAME:
                await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
                return
            
            action = data.split("_")[1]
            
            if action == "users":
                await handle_admin_users(query, context)
            elif action == "admins":
                await handle_admin_admins(query, context)
            elif action == "stats":
                await handle_admin_system_stats(query, context)
            elif action == "settings":
                await handle_admin_settings(query, context)
            elif action == "dashboard":
                await handle_admin_dashboard(query, context)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        if data.startswith("user_"):
            admin_user = query.from_user
            if admin_user.username != ADMIN_USERNAME:
                await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
                return
            
            parts = data.split("_")
            action = parts[1]
            
            if action == "list":
                page = int(parts[2]) if len(parts) > 2 else 1
                await show_users_list(query, context, page)
            elif action == "promote":
                user_id = int(parts[2])
                await promote_user_to_admin(query, context, user_id)
            elif action == "demote":
                user_id = int(parts[2])
                await demote_admin_to_user(query, context, user_id)
            elif action == "delete":
                user_id = int(parts[2])
                await delete_user(query, context, user_id)
            elif action == "approve":
                user_id = int(parts[2])
                await approve_user(query, context, user_id)
            elif action == "decline":
                user_id = int(parts[2])
                await decline_user(query, context, user_id)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
        admin_user = query.from_user
        if admin_user.username != ADMIN_USERNAME:
            await query.edit_message_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∑–∞—è–≤–∫–∏.")
            return
            
        if data.startswith("approve_"):
            user_id = int(data.split("_")[1])
            # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            supabase.table("users").update({"status": "approved"}).eq("telegram_id", user_id).execute()
            # –ü–æ–ª—É—á–∏—Ç—å chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_query = supabase.table("users").select("*").eq("telegram_id", user_id).execute()
            user_data = user_query.data[0] if user_query.data and len(user_query.data) > 0 else None
            if user_data and user_data.get("chat_id"):
                await context.bot.send_message(
                    chat_id=user_data["chat_id"],
                    text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥—ã."
                )
            await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω.")
        elif data.startswith("decline_"):
            user_id = int(data.split("_")[1])
            supabase.table("users").update({"status": "declined"}).eq("telegram_id", user_id).execute()
            user_query = supabase.table("users").select("*").eq("telegram_id", user_id).execute()
            user_data = user_query.data[0] if user_query.data and len(user_query.data) > 0 else None
            if user_data and user_data.get("chat_id"):
                await context.bot.send_message(
                    chat_id=user_data["chat_id"],
                    text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
            await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

    # –§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    async def handle_admin_users(query, context):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_list_1"),
                InlineKeyboardButton("‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", callback_data="user_pending")
            ],
            [
                InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="user_search"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_stats")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")
            ]
        ])
        
        await query.edit_message_text(
            "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    async def handle_admin_admins(query, context):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
        # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
        admins_result = supabase.table("users").select("*").eq("role", "admin").execute()
        admins_count = len(admins_result.data) if admins_result.data else 0
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="admin_list"),
                InlineKeyboardButton("‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_promote")
            ],
            [
                InlineKeyboardButton("‚ûñ –°–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞", callback_data="admin_demote"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤", callback_data="admin_permissions")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")
            ]
        ])
        
        await query.edit_message_text(
            f"üëë **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏**\n\n–¢–µ–∫—É—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤: {admins_count}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    async def handle_admin_system_stats(query, context):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            users_result = supabase.table("users").select("*").execute()
            events_result = supabase.table("time_events").select("*").gte("event_time", get_moscow_time().replace(hour=0, minute=0, second=0).isoformat()).execute()
            
            total_users = len(users_result.data) if users_result.data else 0
            pending_users = len([u for u in users_result.data if u.get("status") == "pending"]) if users_result.data else 0
            approved_users = len([u for u in users_result.data if u.get("status") == "approved"]) if users_result.data else 0
            admins = len([u for u in users_result.data if u.get("role") in ["admin", "superuser"]]) if users_result.data else 0
            
            # –°–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è
            today_events = len(events_result.data) if events_result.data else 0
            arrivals_today = len([e for e in events_result.data if e.get("event_type") == "arrival"]) if events_result.data else 0
            departures_today = len([e for e in events_result.data if e.get("event_type") == "departure"]) if events_result.data else 0
            currently_at_work = arrivals_today - departures_today
            
            stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö: {approved_users}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {pending_users}
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admins}

üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è:**
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {today_events}
‚Ä¢ –ü—Ä–∏—Ö–æ–¥–æ–≤: {arrivals_today}
‚Ä¢ –£—Ö–æ–¥–æ–≤: {departures_today}
‚Ä¢ –°–µ–π—á–∞—Å –Ω–∞ —Ä–∞–±–æ—Ç–µ: {currently_at_work}

üïê **–í—Ä–µ–º—è:** {get_moscow_time().strftime('%d.%m.%Y %H:%M')} –ú–°–ö
            """
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats"),
                    InlineKeyboardButton("üìà –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞", callback_data="admin_export")
                ],
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats"),
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
                ]
            ])
            
            await query.edit_message_text(stats_text, reply_markup=keyboard, parse_mode='Markdown')
            
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
            await query.edit_message_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã.")

    async def handle_admin_settings(query, context):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏", callback_data="settings_time"),
                InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")
            ],
            [
                InlineKeyboardButton("üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞–º–∏", callback_data="settings_branches"),
                InlineKeyboardButton("üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="settings_security")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")
            ]
        ])
        
        await query.edit_message_text(
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    async def show_users_list(query, context, page=1):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        try:
            per_page = 5
            offset = (page - 1) * per_page
            
            # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            users_result = supabase.table("users").select("*").order("created_at", desc=True).range(offset, offset + per_page - 1).execute()
            total_result = supabase.table("users").select("id", count="exact").execute()
            
            if not users_result.data:
                await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            total_users = total_result.count if hasattr(total_result, 'count') else len(users_result.data)
            total_pages = (total_users + per_page - 1) // per_page
            
            text = f"üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π** (—Å—Ç—Ä. {page}/{total_pages})\n\n"
            
            keyboard_buttons = []
            
            for user in users_result.data:
                status_emoji = {"approved": "‚úÖ", "pending": "‚è≥", "declined": "‚ùå"}.get(user.get("status"), "‚ùì")
                role_emoji = {"superuser": "üëë", "admin": "üë®‚Äçüíº", "user": "üë§"}.get(user.get("role"), "üë§")
                
                name = f"{user.get('first_name', '')} {user.get('last_name', '')}".strip()
                username = f"@{user.get('username', '–Ω–µ—Ç')}"
                
                text += f"{status_emoji} {role_emoji} **{name}**\n"
                text += f"   {username} | ID: {user.get('telegram_id')}\n"
                text += f"   –°—Ç–∞—Ç—É—Å: {user.get('status')} | –†–æ–ª—å: {user.get('role')}\n\n"
                
                # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_buttons = []
                if user.get("status") == "pending":
                    user_buttons.extend([
                        InlineKeyboardButton("‚úÖ", callback_data=f"user_approve_{user['telegram_id']}"),
                        InlineKeyboardButton("‚ùå", callback_data=f"user_decline_{user['telegram_id']}")
                    ])
                
                if user.get("role") == "user":
                    user_buttons.append(InlineKeyboardButton("üë®‚Äçüíº", callback_data=f"user_promote_{user['telegram_id']}"))
                elif user.get("role") == "admin":
                    user_buttons.append(InlineKeyboardButton("üë§", callback_data=f"user_demote_{user['telegram_id']}"))
                
                user_buttons.append(InlineKeyboardButton("üóë", callback_data=f"user_delete_{user['telegram_id']}"))
                
                if user_buttons:
                    keyboard_buttons.append(user_buttons)
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            nav_buttons = []
            if page > 1:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"user_list_{page-1}"))
            if page < total_pages:
                nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"user_list_{page+1}"))
            
            if nav_buttons:
                keyboard_buttons.append(nav_buttons)
            
            keyboard_buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")])
            
            keyboard = InlineKeyboardMarkup(keyboard_buttons)
            await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            await query.edit_message_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    async def promote_user_to_admin(query, context, user_id):
        """–ü–æ–≤—ã—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∞–¥–º–∏–Ω–∞"""
        try:
            # –û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = supabase.table("users").update({
                "role": "admin",
                "can_approve_registrations": True
            }).eq("telegram_id", user_id).execute()
            
            if result.data:
                # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                user_data = result.data[0]
                user_name = f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}".strip()
                
                # –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_data.get("chat_id"):
                    await context.bot.send_message(
                        chat_id=user_data["chat_id"],
                        text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–∏—Å—Ç–µ–º—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
                    )
                
                await query.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞:")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    async def demote_admin_to_user(query, context, user_id):
        """–ü–æ–Ω–∏–∑–∏—Ç—å –∞–¥–º–∏–Ω–∞ –¥–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user_result = supabase.table("users").select("*").eq("telegram_id", user_id).execute()
            if user_result.data and user_result.data[0].get("role") == "superuser":
                await query.edit_message_text("‚ùå –ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ —É —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return
            
            # –û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = supabase.table("users").update({
                "role": "user",
                "can_approve_registrations": False
            }).eq("telegram_id", user_id).execute()
            
            if result.data:
                user_data = result.data[0]
                user_name = f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}".strip()
                
                # –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_data.get("chat_id"):
                    await context.bot.send_message(
                        chat_id=user_data["chat_id"],
                        text="üì¢ –í–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –æ–±—ã—á–Ω—ã–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                    )
                
                await query.edit_message_text(f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} –æ—Ç–æ–∑–≤–∞–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞:")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    async def delete_user(query, context, user_id):
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user_result = supabase.table("users").select("*").eq("telegram_id", user_id).execute()
            if user_result.data and user_result.data[0].get("role") == "superuser":
                await query.edit_message_text("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return
            
            user_data = user_result.data[0] if user_result.data else None
            if not user_data:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            user_name = f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}".strip()
            
            # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            supabase.table("time_events").delete().eq("telegram_id", user_id).execute()
            
            # –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = supabase.table("users").delete().eq("telegram_id", user_id).execute()
            
            if result.data:
                await query.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    async def approve_user(query, context, user_id):
        """–û–¥–æ–±—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            result = supabase.table("users").update({"status": "approved"}).eq("telegram_id", user_id).execute()
            
            if result.data:
                user_data = result.data[0]
                user_name = f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}".strip()
                
                # –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_data.get("chat_id"):
                    await context.bot.send_message(
                        chat_id=user_data["chat_id"],
                        text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥—ã."
                    )
                
                await query.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –æ–¥–æ–±—Ä–µ–Ω.")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    async def decline_user(query, context, user_id):
        """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            result = supabase.table("users").update({"status": "declined"}).eq("telegram_id", user_id).execute()
            
            if result.data:
                user_data = result.data[0]
                user_name = f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}".strip()
                
                # –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_data.get("chat_id"):
                    await context.bot.send_message(
                        chat_id=user_data["chat_id"],
                        text="‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                    )
                
                await query.edit_message_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    async def handle_admin_dashboard(query, context):
        """LIVE Dashboard - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            moscow_now = get_moscow_time()
            today_start = moscow_now.replace(hour=0, minute=0, second=0, microsecond=0)
            
            # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—à–ª–∏ —Å–µ–≥–æ–¥–Ω—è
            arrivals_today = supabase.table("time_events").select("*").eq("event_type", "arrival").gte("event_time", today_start.isoformat()).execute()
            
            # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É—à–ª–∏ —Å–µ–≥–æ–¥–Ω—è
            departures_today = supabase.table("time_events").select("*").eq("event_type", "departure").gte("event_time", today_start.isoformat()).execute()
            
            # –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–ª–∏–∞–ª—ã
            branches_result = supabase.table("branches").select("*").execute()
            branches = {b["id"]: b["name"] for b in branches_result.data} if branches_result.data else {}
            
            # –ê–Ω–∞–ª–∏–∑ –∫—Ç–æ —Å–µ–π—á–∞—Å –Ω–∞ —Ä–∞–±–æ—Ç–µ
            currently_at_work = []
            late_arrivals = []
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏—Ö–æ–¥–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            user_arrivals = {}
            for arrival in arrivals_today.data if arrivals_today.data else []:
                user_id = arrival["telegram_id"]
                if user_id not in user_arrivals or arrival["event_time"] > user_arrivals[user_id]["event_time"]:
                    user_arrivals[user_id] = arrival
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —É—Ö–æ–¥–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            user_departures = {}
            for departure in departures_today.data if departures_today.data else []:
                user_id = departure["telegram_id"]
                if user_id not in user_departures or departure["event_time"] > user_departures[user_id]["event_time"]:
                    user_departures[user_id] = departure
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ç–æ —Å–µ–π—á–∞—Å –Ω–∞ —Ä–∞–±–æ—Ç–µ –∏ –∫—Ç–æ –æ–ø–æ–∑–¥–∞–ª
            for user_id, arrival in user_arrivals.items():
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É—Ö–æ–¥ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞
                if user_id not in user_departures or user_departures[user_id]["event_time"] < arrival["event_time"]:
                    currently_at_work.append(arrival)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–æ–∑–¥–∞–Ω–∏–µ (–ø–æ—Å–ª–µ 9:00)
                    arrival_time = datetime.fromisoformat(arrival["event_time"])
                    work_start = arrival_time.replace(hour=9, minute=0, second=0, microsecond=0)
                    if arrival_time > work_start:
                        late_minutes = int((arrival_time - work_start).total_seconds() / 60)
                        arrival["late_minutes"] = late_minutes
                        late_arrivals.append(arrival)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º
            branch_stats = {}
            for arrival in currently_at_work:
                branch_id = arrival["branch_id"]
                branch_name = branches.get(branch_id, f"–§–∏–ª–∏–∞–ª {branch_id}")
                if branch_name not in branch_stats:
                    branch_stats[branch_name] = 0
                branch_stats[branch_name] += 1
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            dashboard_text = f"""
üìä **LIVE DASHBOARD**
üïê **{moscow_now.strftime('%d.%m.%Y %H:%M')} –ú–°–ö**

üü¢ **–°–µ–π—á–∞—Å –Ω–∞ —Ä–∞–±–æ—Ç–µ: {len(currently_at_work)}**
üî¥ **–û–ø–æ–∑–¥–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {len(late_arrivals)}**
üìà **–í—Å–µ–≥–æ –ø—Ä–∏—Ö–æ–¥–æ–≤: {len(user_arrivals)}**
üìâ **–í—Å–µ–≥–æ —É—Ö–æ–¥–æ–≤: {len(user_departures)}**

üè¢ **–ü–æ —Ñ–∏–ª–∏–∞–ª–∞–º:**
"""
            
            for branch_name, count in branch_stats.items():
                dashboard_text += f"‚Ä¢ {branch_name}: {count} —á–µ–ª.\n"
            
            if not branch_stats:
                dashboard_text += "‚Ä¢ –ù–∏–∫–æ–≥–æ –Ω–µ—Ç –Ω–∞ —Ä–∞–±–æ—Ç–µ\n"
            
            dashboard_text += "\n‚ö†Ô∏è **–û–ø–æ–∑–¥–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è:**\n"
            
            if late_arrivals:
                for late in sorted(late_arrivals, key=lambda x: x["late_minutes"], reverse=True)[:5]:
                    name = f"{late.get('first_name', '')} {late.get('last_name', '')}".strip()
                    branch_name = branches.get(late["branch_id"], f"–§–∏–ª–∏–∞–ª {late['branch_id']}")
                    arrival_time = datetime.fromisoformat(late["event_time"])
                    dashboard_text += f"‚Ä¢ {name} - {late['late_minutes']} –º–∏–Ω\n"
                    dashboard_text += f"  {branch_name}, {arrival_time.strftime('%H:%M')}\n"
                
                if len(late_arrivals) > 5:
                    dashboard_text += f"‚Ä¢ ... –∏ –µ—â–µ {len(late_arrivals) - 5} –æ–ø–æ–∑–¥–∞–Ω–∏–π\n"
            else:
                dashboard_text += "‚Ä¢ –û–ø–æ–∑–¥–∞–Ω–∏–π –Ω–µ—Ç üéâ\n"
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            dashboard_text += "\nüìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:**\n"
            all_events = []
            if arrivals_today.data:
                all_events.extend(arrivals_today.data)
            if departures_today.data:
                all_events.extend(departures_today.data)
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
            all_events.sort(key=lambda x: x["event_time"], reverse=True)
            
            for event in all_events[:5]:
                name = f"{event.get('first_name', '')} {event.get('last_name', '')}".strip()
                branch_name = branches.get(event["branch_id"], f"–§–∏–ª–∏–∞–ª {event['branch_id']}")
                event_time = datetime.fromisoformat(event["event_time"])
                event_emoji = "üü¢" if event["event_type"] == "arrival" else "üî¥"
                event_text = "–ø—Ä–∏—à–µ–ª" if event["event_type"] == "arrival" else "—É—à–µ–ª"
                dashboard_text += f"{event_emoji} {name} {event_text}\n"
                dashboard_text += f"  {branch_name}, {event_time.strftime('%H:%M')}\n"
            
            if not all_events:
                dashboard_text += "‚Ä¢ –°–æ–±—ã—Ç–∏–π —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç\n"
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_dashboard"),
                    InlineKeyboardButton("üìä –î–µ—Ç–∞–ª–∏", callback_data="dashboard_details")
                ],
                [
                    InlineKeyboardButton("‚ö†Ô∏è –ê–ª–µ—Ä—Ç—ã", callback_data="dashboard_alerts"),
                    InlineKeyboardButton("üìà –≠–∫—Å–ø–æ—Ä—Ç", callback_data="dashboard_export")
                ],
                [
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")
                ]
            ])
            
            await query.edit_message_text(dashboard_text, reply_markup=keyboard, parse_mode='Markdown')
            
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ LIVE Dashboard:")
            await query.edit_message_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ LIVE Dashboard. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    app.add_handler(MessageHandler(filters.CONTACT, contact_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_qr))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_qr))
    from telegram.ext import CallbackQueryHandler
    app.add_handler(CallbackQueryHandler(callback_handler))

    app.run_polling()
