# tamagotchi_scheduler.py
import os
import asyncio
import logging
from datetime import datetime, timezone, timedelta
from dotenv import load_dotenv
import utils.httpx_proxy_patch
from supabase import create_client, Client
from telegram import Bot
import random
from pathlib import Path
from dotenv import load_dotenv

# –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)
MOSCOW_TZ = timezone(timedelta(hours=3))

def get_moscow_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ"""
    return datetime.now(MOSCOW_TZ)

if Path('.env').is_file():
    load_dotenv()      # –ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s %(levelname)s %(message)s', level=logging.INFO
)

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
SUPABASE_URL = os.environ.get("NEXT_PUBLIC_SUPABASE_URL")
SUPABASE_KEY = os.environ.get("NEXT_PUBLIC_SUPABASE_ANON_KEY")

if not all([TELEGRAM_TOKEN, SUPABASE_URL, SUPABASE_KEY]):
    raise Exception("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
bot = Bot(token=TELEGRAM_TOKEN)

async def get_tamagotchi_message(message_type):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–º–∞–≥–æ—á–∏"""
    try:
        result = supabase.table("tamagotchi_messages").select("*").eq("message_type", message_type).execute()
        if result.data:
            message_data = random.choice(result.data)
            return f"{message_data['emoji']} {message_data['message']}"
        return "üêæ –¢–∞–º–∞–≥–æ—á–∏ —á—Ç–æ-—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç..."
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∞–º–∞–≥–æ—á–∏:")
        return "üêæ –¢–∞–º–∞–≥–æ—á–∏ –º–æ–ª—á–∏—Ç..."

async def check_hungry_tamagotchis():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ–ª–æ–¥–Ω—ã—Ö —Ç–∞–º–∞–≥–æ—á–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–ª–æ–¥–Ω—ã—Ö —Ç–∞–º–∞–≥–æ—á–∏...")
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∂–∏–≤—ã—Ö —Ç–∞–º–∞–≥–æ—á–∏
        result = supabase.table("tamagotchi").select("*").eq("is_alive", True).execute()
        
        if not result.data:
            logging.info("–¢–∞–º–∞–≥–æ—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        now = get_moscow_time().replace(tzinfo=None)
        
        for tamagotchi in result.data:
            try:
                # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
                last_fed = datetime.fromisoformat(tamagotchi["last_fed"])
                if last_fed.tzinfo is not None:
                    last_fed = last_fed.replace(tzinfo=None)
                
                hours_since_fed = (now - last_fed).total_seconds() / 3600
                
                # –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                hunger = max(0, tamagotchi["hunger"] - int(hours_since_fed * 5))
                happiness = max(0, tamagotchi["happiness"] - int(hours_since_fed * 3))
                health = max(0, tamagotchi["health"] - int(hours_since_fed * 2))
                
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–º–µ—Ä—Ç—å (3 –¥–Ω—è = 72 —á–∞—Å–∞)
                is_alive = hours_since_fed < 72
                
                # –û–±–Ω–æ–≤–∏—Ç—å –≤ –±–∞–∑–µ
                updated_data = {
                    "hunger": hunger,
                    "happiness": happiness,
                    "health": health,
                    "is_alive": is_alive,
                    "updated_at": now.isoformat()
                }
                
                supabase.table("tamagotchi").update(updated_data).eq("telegram_id", tamagotchi["telegram_id"]).execute()
                
                # –ü–æ–ª—É—á–∏—Ç—å chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_result = supabase.table("users").select("chat_id").eq("telegram_id", tamagotchi["telegram_id"]).execute()
                if not user_result.data or not user_result.data[0].get("chat_id"):
                    continue
                
                chat_id = user_result.data[0]["chat_id"]
                
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if not is_alive:
                    # –¢–∞–º–∞–≥–æ—á–∏ —É–º–µ—Ä
                    message = await get_tamagotchi_message("dead")
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"üíÄ **–í–∞—à —Ç–∞–º–∞–≥–æ—á–∏ —É–º–µ—Ä!**\n\n{message}\n\n–í—ã –Ω–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ QR-–∫–æ–¥—ã –±–æ–ª–µ–µ 3 –¥–Ω–µ–π. –í–æ—Å–∫—Ä–µ—Å–∏—Ç–µ –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º!",
                        parse_mode='Markdown'
                    )
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ—Ä—Ç–∏ —Ç–∞–º–∞–≥–æ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tamagotchi['telegram_id']}")
                    
                elif hunger < 20 or happiness < 20 or health < 20:
                    # –¢–∞–º–∞–≥–æ—á–∏ –æ—á–µ–Ω—å –≥–æ–ª–æ–¥–µ–Ω/–±–æ–ª–µ–Ω
                    message = await get_tamagotchi_message("sick")
                    status_text = f"""
üò∞ **{tamagotchi['name']}** (–£—Ä–æ–≤–µ–Ω—å {tamagotchi['level']}) - –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï!
üçé –°—ã—Ç–æ—Å—Ç—å: {hunger}/100
üòä –°—á–∞—Å—Ç—å–µ: {happiness}/100
‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {health}/100

{message}

‚ö†Ô∏è –°—Ä–æ—á–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∞ —Ä–∞–±–æ—Ç–µ, –∏–Ω–∞—á–µ —Ç–∞–º–∞–≥–æ—á–∏ —É–º—Ä–µ—Ç!
                    """.strip()
                    
                    await bot.send_message(
                        chat_id=chat_id,
                        text=status_text,
                        parse_mode='Markdown'
                    )
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tamagotchi['telegram_id']}")
                    
                elif hunger < 50 or happiness < 50 or health < 50:
                    # –¢–∞–º–∞–≥–æ—á–∏ –≥–æ–ª–æ–¥–µ–Ω
                    message = await get_tamagotchi_message("hungry")
                    status_text = f"""
üòî **{tamagotchi['name']}** (–£—Ä–æ–≤–µ–Ω—å {tamagotchi['level']}) - –≥–æ–ª–æ–¥–µ–Ω
üçé –°—ã—Ç–æ—Å—Ç—å: {hunger}/100
üòä –°—á–∞—Å—Ç—å–µ: {happiness}/100
‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {health}/100

{message}

–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥—ã –Ω–∞ —Ä–∞–±–æ—Ç–µ!
                    """.strip()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ–ª–æ–¥–µ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤
                    if hours_since_fed > 6 and int(hours_since_fed) % 6 == 0:
                        await bot.send_message(
                            chat_id=chat_id,
                            text=status_text,
                            parse_mode='Markdown'
                        )
                        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ–ª–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tamagotchi['telegram_id']}")
                
            except Exception as e:
                logging.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–º–∞–≥–æ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tamagotchi['telegram_id']}:")
                continue
        
        logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–º–∞–≥–æ—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–º–∞–≥–æ—á–∏:")

async def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–º–∞–≥–æ—á–∏"""
    logging.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ç–∞–º–∞–≥–æ—á–∏...")
    
    while True:
        try:
            await check_hungry_tamagotchis()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
            await asyncio.sleep(3600)  # 1 —á–∞—Å = 3600 —Å–µ–∫—É–Ω–¥
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ:")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            await asyncio.sleep(300)

if __name__ == "__main__":
    asyncio.run(main())
