## auto_close_scheduler.py
import os
import asyncio
import schedule
import time
from datetime import datetime, timedelta, timezone
from dotenv import load_dotenv
import utils.httpx_proxy_patch
from supabase import create_client, Client
from telegram import Bot
from pathlib import Path

# –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)
MOSCOW_TZ = timezone(timedelta(hours=3))

def get_moscow_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ"""
    return datetime.now(MOSCOW_TZ)

if Path('.env').is_file():
    load_dotenv()      # –ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
SUPABASE_URL = os.environ.get("NEXT_PUBLIC_SUPABASE_URL")
SUPABASE_KEY = os.environ.get("NEXT_PUBLIC_SUPABASE_ANON_KEY")
ADMIN_USERNAME = "gayazking"

if not all([TELEGRAM_TOKEN, SUPABASE_URL, SUPABASE_KEY]):
    raise Exception("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
bot = Bot(token=TELEGRAM_TOKEN)

async def get_users_without_departure():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—à–ª–∏, –Ω–æ –Ω–µ —É—à–ª–∏ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        moscow_now = get_moscow_time()
        today = moscow_now.date()
        today_start = datetime.combine(today, datetime.min.time(), MOSCOW_TZ)
        today_end = datetime.combine(today, datetime.max.time(), MOSCOW_TZ)
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–æ–±—ã—Ç–∏–µ–º –ø—Ä–∏—Ö–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è
        arrivals_result = supabase.table("time_events").select("*").eq("event_type", "arrival").gte("event_time", today_start.isoformat()).lte("event_time", today_end.isoformat()).execute()
        
        users_without_departure = []
        
        for arrival in arrivals_result.data:
            user_id = arrival["telegram_id"]
            arrival_time = arrival["event_time"]
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Å–æ–±—ã—Ç–∏–µ —É—Ö–æ–¥–∞ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞
            departure_result = supabase.table("time_events").select("*").eq("telegram_id", user_id).eq("event_type", "departure").gt("event_time", arrival_time).limit(1).execute()
            
            if not departure_result.data:
                users_without_departure.append(arrival)
        
        return users_without_departure
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —É—Ö–æ–¥–∞: {e}")
        return []

async def auto_close_workday():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —É—Ö–æ–¥–∞"""
    print(f"–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –≤ {datetime.now()}")
    
    users_without_departure = await get_users_without_departure()
    
    if not users_without_departure:
        print("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è")
        return
    
    # –ü–æ–ª—É—á–∏—Ç—å chat_id –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    admin_query = supabase.table("users").select("*").eq("username", ADMIN_USERNAME).execute()
    admin = admin_query.data[0] if admin_query.data and len(admin_query.data) > 0 else None
    admin_chat_id = admin["chat_id"] if admin and admin.get("chat_id") else None
    
    for arrival_event in users_without_departure:
        try:
            user_id = arrival_event["telegram_id"]
            user_name = f"{arrival_event['first_name']} {arrival_event['last_name']}"
            branch_name = arrival_event["branch_name"]
            arrival_time = datetime.fromisoformat(arrival_event["event_time"])
            
            # –í—Ä–µ–º—è –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è - 21:00 —Å–µ–≥–æ–¥–Ω—è –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
            moscow_now = get_moscow_time()
            close_time = datetime.combine(moscow_now.date(), datetime.strptime("21:00", "%H:%M").time(), MOSCOW_TZ)
            
            # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å 8 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã
            work_hours = 8.0
            
            # –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ö–æ–¥–∞
            auto_departure = {
                "telegram_id": user_id,
                "first_name": arrival_event["first_name"],
                "last_name": arrival_event["last_name"],
                "username": arrival_event["username"],
                "chat_id": arrival_event["chat_id"],
                "branch_id": arrival_event["branch_id"],
                "branch_name": branch_name,
                "event_time": close_time.isoformat(),
                "event_type": "departure",
                "is_auto_closed": True,
                "work_hours": work_hours,
                "qr_timestamp": None,
                "signature": "auto_close",
                "raw_json": '{"auto_closed": true}'
            }
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É
            supabase.table("time_events").insert(auto_departure).execute()
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            user_chat_id = arrival_event["chat_id"]
            if user_chat_id:
                message = (
                    "üî¥ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ó–ê–ö–†–´–¢–ò–ï –†–ê–ë–û–ß–ï–ì–û –î–ù–Ø\n\n"
                    f"–í–∞—à —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç –≤ 21:00\n"
                    f"–§–∏–ª–∏–∞–ª: {branch_name}\n"
                    f"–£—á—Ç–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤: 8\n\n"
                    "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
                )
                await bot.send_message(chat_id=user_chat_id, text=message)
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            if admin_chat_id:
                admin_message = (
                    "‚ö†Ô∏è –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ó–ê–ö–†–´–¢–ò–ï –†–ê–ë–û–ß–ï–ì–û –î–ù–Ø\n\n"
                    f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {user_name}\n"
                    f"Username: @{arrival_event['username']}\n"
                    f"–§–∏–ª–∏–∞–ª: {branch_name}\n"
                    f"–í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞: {arrival_time:%d.%m.%Y %H:%M}\n"
                    f"–ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ: 21:00\n"
                    f"–£—á—Ç–µ–Ω–æ —á–∞—Å–æ–≤: 8\n\n"
                    "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è."
                )
                await bot.send_message(chat_id=admin_chat_id, text=admin_message)
            
            print(f"–ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {arrival_event.get('telegram_id')}: {e}")

def schedule_auto_close():
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞ 21:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"""
    schedule.every().day.at("21:00").do(lambda: asyncio.run(auto_close_workday()))
    
    print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–ø—É—â–µ–Ω. –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ –≤ 21:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.")
    
    while True:
        schedule.run_pending()
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

if __name__ == "__main__":
    schedule_auto_close()
