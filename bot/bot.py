#bot.py
import os
import sys
import json
import base64
import hmac
import hashlib
import logging
from datetime import datetime, timezone, timedelta
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
from supabase import create_client, Client
from PIL import Image
from pyzbar.pyzbar import decode
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
current_dir = Path(__file__).parent
project_root = current_dir.parent
sys.path.insert(0, str(project_root))

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º utils
import utils.httpx_proxy_patch

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª .env –¥–æ—Å—Ç—É–ø–µ–Ω)
try:
    load_dotenv()
except (PermissionError, FileNotFoundError) as e:
    logging.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ Docker.")

# –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)
MOSCOW_TZ = timezone(timedelta(hours=3))

def get_moscow_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ"""
    return datetime.now(MOSCOW_TZ)

def get_moscow_timestamp():
    """–ü–æ–ª—É—á–∏—Ç—å timestamp –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    return int(get_moscow_time().timestamp())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s %(levelname)s %(message)s', level=logging.INFO
)

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
QR_SECRET = os.environ.get("QR_SECRET")
SUPABASE_URL = os.environ.get("NEXT_PUBLIC_SUPABASE_URL")
SUPABASE_KEY = os.environ.get("NEXT_PUBLIC_SUPABASE_ANON_KEY")

if not all([TELEGRAM_TOKEN, QR_SECRET, SUPABASE_URL, SUPABASE_KEY]):
    raise Exception("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase!")

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

def verify_signature(branch_id, time_window, signature):
    if not QR_SECRET:
        logging.error("QR_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    try:
        msg = f"{branch_id}:{time_window}".encode()
        secret = QR_SECRET.encode()
        expected = hmac.new(secret, msg, hashlib.sha256).hexdigest()
        return hmac.compare_digest(signature, expected)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ QR-–∫–æ–¥–∞:")
        return False

from telegram import InlineKeyboardMarkup, InlineKeyboardButton

ADMIN_USERNAME = "gayazking"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    first_name = getattr(user, "first_name", "")
    last_name = getattr(user, "last_name", "")
    username = getattr(user, "username", "")
    chat_id = update.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ users –∏ –æ–¥–æ–±—Ä–µ–Ω –ª–∏ –æ–Ω
    user_query = supabase.table("users").select("*").eq("telegram_id", user_id).execute()
    user_data = user_query.data[0] if user_query.data and len(user_query.data) > 0 else None

    # –ï—Å–ª–∏ —ç—Ç–æ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–æ username), –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º/—Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å
    if username == ADMIN_USERNAME:
        if not user_data:
            supabase.table("users").insert({
                "telegram_id": user_id,
                "first_name": first_name,
                "last_name": last_name,
                "username": username,
                "chat_id": chat_id,
                "status": "approved",
                "role": "superuser",
                "is_superuser": True,
                "can_approve_registrations": True
            }).execute()
        else:
            supabase.table("users").update({
                "first_name": first_name,
                "last_name": last_name,
                "chat_id": chat_id,
                "status": "approved",
                "role": "superuser",
                "is_superuser": True,
                "can_approve_registrations": True
            }).eq("telegram_id", user_id).execute()
        
        # –ú–µ–Ω—é –¥–ª—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from telegram import ReplyKeyboardMarkup, KeyboardButton
        keyboard = ReplyKeyboardMarkup([
            ["üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìã –ú–µ–Ω—é"],
            ["üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "‚ùì –ü–æ–º–æ—â—å"]
        ], resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.",
            reply_markup=keyboard
        )
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –∏ –æ–¥–æ–±—Ä–µ–Ω
    if user_data and user_data.get("status") == "approved":
        from telegram import ReplyKeyboardMarkup, KeyboardButton
        keyboard = ReplyKeyboardMarkup([
            ["üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìã –ú–µ–Ω—é"],
            ["‚ùì –ü–æ–º–æ—â—å"]
        ], resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ú–æ–∂–µ—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é.",
            reply_markup=keyboard
        )
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –Ω–æ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω
    if user_data and user_data.get("status") == "pending":
        await update.message.reply_text("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    if user_data and user_data.get("status") == "declined":
        await update.message.reply_text("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    from telegram import ReplyKeyboardMarkup, KeyboardButton
    keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text(
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=keyboard
    )

async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    first_name = getattr(user, "first_name", "")
    last_name = getattr(user, "last_name", "")
    username = getattr(user, "username", "")
    chat_id = update.message.chat.id
    phone = update.message.contact.phone_number if update.message.contact else None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ users
    user_query = supabase.table("users").select("*").eq("telegram_id", user_id).execute()
    user_data = user_query.data[0] if user_query.data and len(user_query.data) > 0 else None

    if user_data:
        await update.message.reply_text("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –§–ò–û
    context.user_data['registration_data'] = {
        "telegram_id": user_id,
        "first_name": first_name,
        "last_name": last_name,
        "username": username,
        "phone": phone,
        "chat_id": chat_id,
        "status": "pending",
        "role": "user"
    }
    
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –§–ò–û
    context.user_data['waiting_for_full_name'] = True
    
    from telegram import ReplyKeyboardRemove
    await update.message.reply_text(
        "üìù **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –®–∞–≥ 2 –∏–∑ 3**\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):\n\n"
        "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode='Markdown'
    )

async def handle_full_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if 'registration_data' not in context.user_data:
            await update.message.reply_text(
                "‚ùå –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
            )
            # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('waiting_for_full_name', None)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –§–ò–û (–º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞)
        name_parts = text.strip().split()
        if len(name_parts) < 2:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º –§–∞–º–∏–ª–∏—è –∏ –ò–º—è).\n\n"
                "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø—Ä–æ–±–µ–ª—ã)
        import re
        if not re.match(r'^[–∞-—è—ë–ê-–Ø–Åa-zA-Z\s\-]+$', text.strip()):
            await update.message.reply_text(
                "‚ùå –§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û:"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –§–ò–û –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
        context.user_data['registration_data']['full_name'] = text.strip()
        context.user_data.pop('waiting_for_full_name', None)
        context.user_data['waiting_for_birth_date'] = True
        
        await update.message.reply_text(
            "üìÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –®–∞–≥ 3 –∏–∑ 3**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n\n"
            "–ü—Ä–∏–º–µ—Ä: 15.03.1990",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –§–ò–û:")
        # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        context.user_data.pop('waiting_for_full_name', None)
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )

async def handle_birth_date_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        import re
        from datetime import datetime, date
        
        date_pattern = r'^(\d{1,2})\.(\d{1,2})\.(\d{4})$'
        match = re.match(date_pattern, text.strip())
        
        if not match:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
                "–ü—Ä–∏–º–µ—Ä: 15.03.1990"
            )
            return
        
        day, month, year = map(int, match.groups())
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
        try:
            birth_date = date(year, month, day)
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã.\n\n"
                "–ü—Ä–∏–º–µ—Ä: 15.03.1990"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 14 –¥–æ 100 –ª–µ—Ç)
        today = date.today()
        age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
        
        if age < 14:
            await update.message.reply_text(
                "‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 14 –ª–µ—Ç."
            )
            return
        
        if age > 100:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        context.user_data['registration_data']['birth_date'] = birth_date.isoformat()
        context.user_data.pop('waiting_for_birth_date', None)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        reg_data = context.user_data['registration_data']
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Markdown (–±–µ–∑ —Ç–æ—á–µ–∫ –¥–ª—è –¥–∞—Ç)
        def escape_markdown_text(text, is_date=False):
            """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown, –∏—Å–∫–ª—é—á–∞—è —Ç–æ—á–∫–∏ –¥–ª—è –¥–∞—Ç"""
            if not text:
                return ""
            
            # –ë–∞–∑–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            escaped = text.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('`', '\\`').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('!', '\\!')
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ù–ï –¥–∞—Ç–∞
            if not is_date:
                escaped = escaped.replace('.', '\\.')
            
            return escaped
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞
        full_name_escaped = escape_markdown_text(reg_data['full_name'])
        phone_escaped = escape_markdown_text(reg_data['phone'])
        username_escaped = escape_markdown_text(reg_data['username'])
        date_escaped = escape_markdown_text(text.strip(), is_date=True)  # –ù–ï —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –≤ –¥–∞—Ç–µ
        
        confirmation_text = f"""
‚úÖ *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*

üë§ *–§–ò–û:* {full_name_escaped}
üìÖ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* {date_escaped}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone_escaped}
üÜî *Username:* @{username_escaped}

–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ?
        """
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ", callback_data="confirm_registration"),
                InlineKeyboardButton("‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏", callback_data="restart_registration")
            ]
        ])
        
        await update.message.reply_text(
            confirmation_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è:")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_registration_confirmation(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        reg_data = context.user_data.get('registration_data')
        if not reg_data:
            await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º telegram_id
        existing_user = supabase.table("users").select("*").eq("telegram_id", reg_data['telegram_id']).execute()
        if existing_user.data:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            context.user_data.pop('registration_data', None)
            return
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            supabase.table("users").insert(reg_data).execute()
        except Exception as db_error:
            logging.exception("–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            context.user_data.pop('registration_data', None)
            return
        
        # –ù–∞–π—Ç–∏ chat_id –∞–¥–º–∏–Ω–∞ (–ø–æ username)
        admin_query = supabase.table("users").select("*").eq("username", ADMIN_USERNAME).execute()
        admin = admin_query.data[0] if admin_query.data and len(admin_query.data) > 0 else None
        admin_chat_id = admin["chat_id"] if admin and admin.get("chat_id") else None

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{reg_data['telegram_id']}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{reg_data['telegram_id']}")
            ]
        ])
        
        if admin_chat_id and admin_chat_id != 0:
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Markdown (–±–µ–∑ —Ç–æ—á–µ–∫ –¥–ª—è –¥–∞—Ç)
            def escape_markdown_admin(text, is_date=False):
                """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown, –∏—Å–∫–ª—é—á–∞—è —Ç–æ—á–∫–∏ –¥–ª—è –¥–∞—Ç"""
                if not text:
                    return ""
                
                # –ë–∞–∑–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                escaped = text.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('`', '\\`').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('!', '\\!')
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ù–ï –¥–∞—Ç–∞
                if not is_date:
                    escaped = escaped.replace('.', '\\.')
                
                return escaped
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∏–∑ ISO —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
            try:
                from datetime import date
                birth_date_iso = reg_data['birth_date']  # –§–æ—Ä–º–∞—Ç: "2000-11-02"
                birth_date_obj = date.fromisoformat(birth_date_iso)
                birth_date_display = birth_date_obj.strftime('%d.%m.%Y')  # –§–æ—Ä–º–∞—Ç: "02.11.2000"
            except Exception as e:
                logging.exception("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞—Ç—ã:")
                birth_date_display = reg_data['birth_date']  # Fallback –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞
            full_name_escaped = escape_markdown_admin(reg_data['full_name'])
            birth_date_escaped = escape_markdown_admin(birth_date_display, is_date=True)  # –ù–ï —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –≤ –¥–∞—Ç–µ
            phone_escaped = escape_markdown_admin(reg_data['phone'])
            username_escaped = escape_markdown_admin(reg_data['username'])
            
            await context.bot.send_message(
                chat_id=admin_chat_id,
                text=f"""üìã *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:*

üë§ *–§–ò–û:* {full_name_escaped}
üìÖ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* {birth_date_escaped}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone_escaped}
üÜî *Username:* @{username_escaped}
üìù *Telegram ID:* {reg_data['telegram_id']}
üí¨ *Chat ID:* {reg_data['chat_id']}""",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
            await query.edit_message_text(
                "‚úÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                parse_mode='Markdown'
            )
        else:
            await query.edit_message_text(
                "‚úÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. "
                "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (username: gayazking) –∑–∞–ø—É—Å—Ç–∏—Ç—å /start –≤ —ç—Ç–æ–º –±–æ—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫."
            )
        
        # –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        context.user_data.pop('registration_data', None)
        
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_registration_restart(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = query.from_user
        user_id = user.id
        first_name = getattr(user, "first_name", "")
        last_name = getattr(user, "last_name", "")
        username = getattr(user, "username", "")
        chat_id = query.message.chat.id
        
        # –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        old_reg_data = context.user_data.get('registration_data', {})
        phone = old_reg_data.get('phone', '')
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        context.user_data['registration_data'] = {
            "telegram_id": user_id,
            "first_name": first_name,
            "last_name": last_name,
            "username": username,
            "phone": phone,
            "chat_id": chat_id,
            "status": "pending",
            "role": "user"
        }
        
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –§–ò–û
        context.user_data['waiting_for_full_name'] = True
        
        await query.edit_message_text(
            "üîÑ **–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ**\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):\n\n"
            "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def get_last_event_type(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        result = supabase.table("time_events").select("event_type").eq("telegram_id", user_id).order("event_time", desc=True).limit(1).execute()
        if result.data and len(result.data) > 0:
            return result.data[0]["event_type"]
        return None
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è:")
        return None

async def get_last_arrival_branch(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–ª–∏–∞–ª –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞ –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —É—Ö–æ–¥–∞"""
    try:
        result = supabase.table("time_events").select("*").eq("telegram_id", user_id).eq("event_type", "arrival").order("event_time", desc=True).limit(1).execute()
        if result.data and len(result.data) > 0:
            arrival_event = result.data[0]
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Å–æ–±—ã—Ç–∏–µ —É—Ö–æ–¥–∞ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞
            departure_result = supabase.table("time_events").select("*").eq("telegram_id", user_id).eq("event_type", "departure").gt("event_time", arrival_event["event_time"]).limit(1).execute()
            if not departure_result.data:
                return arrival_event["branch_id"]
        return None
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞:")
        return None

async def check_user_authorization(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_query = supabase.table("users").select("*").eq("telegram_id", user_id).execute()
        if not user_query.data:
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        user_data = user_query.data[0]
        is_authorized = user_data.get("status") == "approved"
        logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: —Å—Ç–∞—Ç—É—Å={user_data.get('status')}, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω={is_authorized}")
        return is_authorized
        
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return False

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if not await check_user_authorization(user_id):
        await update.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π.")
        return
    
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞
    last_event_type = await get_last_event_type(user_id)
    status_text = ""
    if last_event_type == "arrival":
        status_text = "üü¢ –°—Ç–∞—Ç—É—Å: –ù–∞ —Ä–∞–±–æ—Ç–µ"
    elif last_event_type == "departure":
        status_text = "üî¥ –°—Ç–∞—Ç—É—Å: –ù–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ"
    else:
        status_text = "‚ö™ –°—Ç–∞—Ç—É—Å: –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π"
    
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_stats"),
            InlineKeyboardButton("üìã –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="menu_status")
        ],
        [
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help"),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="menu_refresh")
        ]
    ])
    
    await update.message.reply_text(
        f"üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n{status_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

async def handle_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–º–æ—â–∏"""
    help_text = """
‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏**

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–∏—Å—Ç–µ–º–æ–π:**

üîπ **–û—Ç–º–µ—Ç–∫–∞ –ø—Ä–∏—Ö–æ–¥–∞/—É—Ö–æ–¥–∞:**
   ‚Ä¢ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç
   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ QR-–∫–æ–¥ —á–µ—Ç–∫–æ –≤–∏–¥–µ–Ω –∏ –Ω–µ —Ä–∞–∑–º—ã—Ç

üîπ **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:**
   ‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
   ‚Ä¢ QR-–∫–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ –∫–∞–¥—Ä–µ
   ‚Ä¢ –ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —Ä–∞–∑–º—ã—Ç–∏—è
   ‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–æ–≤–Ω–æ

üîπ **–õ–æ–≥–∏–∫–∞ –ø—Ä–∏—Ö–æ–¥–∞/—É—Ö–æ–¥–∞:**
   ‚Ä¢ –ü–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ç–æ–ª—å–∫–æ "–ü—Ä–∏—à–µ–ª"
   ‚Ä¢ –ü–æ—Å–ª–µ –ø—Ä–∏—Ö–æ–¥–∞ - —Ç–æ–ª—å–∫–æ "–£—à–µ–ª"
   ‚Ä¢ –£—Ö–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ —Å —Ç–æ–≥–æ –∂–µ —Ñ–∏–ª–∏–∞–ª–∞

üîπ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–Ω—è–º
   ‚Ä¢ –û—Ç–º–µ—Ç–∫–∏ –æ–± –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–∏

üîπ **–ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ:**
   ‚Ä¢ –ï—Å–ª–∏ –Ω–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ —É—Ö–æ–¥ –¥–æ 21:00
   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç –¥–µ–Ω—å
   ‚Ä¢ –ë—É–¥–µ—Ç —É—á—Ç–µ–Ω–æ 8 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ—Ç—á–µ—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
‚Ä¢ üìã –ú–µ–Ω—é - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ ‚ùì –ü–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üìû –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É", callback_data="contact_developer"),
            InlineKeyboardButton("üêõ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ", callback_data="report_bug")
        ]
    ])
    
    await update.message.reply_text(help_text, reply_markup=keyboard, parse_mode='Markdown')

async def handle_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    username = getattr(update.message.from_user, "username", "")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if username != ADMIN_USERNAME:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_result = supabase.table("users").select("*").execute()
    total_users = len(users_result.data) if users_result.data else 0
    pending_users = len([u for u in users_result.data if u.get("status") == "pending"]) if users_result.data else 0
    approved_users = len([u for u in users_result.data if u.get("status") == "approved"]) if users_result.data else 0
    admins = len([u for u in users_result.data if u.get("role") == "admin"]) if users_result.data else 0
    
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üìä LIVE Dashboard", callback_data="admin_dashboard"),
            InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="admin_admins"),
            InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", callback_data="admin_stats")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
        ]
    ])
    
    admin_text = f"""
üëë **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**

üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {pending_users}
‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö: {approved_users}
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admins}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    await update.message.reply_text(admin_text, reply_markup=keyboard, parse_mode='Markdown')

async def handle_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if not await check_user_authorization(user_id):
        await update.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π.")
        return
    
    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üìÖ 3 –¥–Ω—è", callback_data="stats_3"),
            InlineKeyboardButton("üìÖ 7 –¥–Ω–µ–π", callback_data="stats_7")
        ],
        [
            InlineKeyboardButton("üìÖ 14 –¥–Ω–µ–π", callback_data="stats_14"),
            InlineKeyboardButton("üìÖ 30 –¥–Ω–µ–π", callback_data="stats_30")
        ]
    ])
    await update.message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
        reply_markup=keyboard
    )

async def generate_statistics_report(user_id, days):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from datetime import timedelta
    
    try:
        # –ü–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days)
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥
        events_result = supabase.table("time_events").select("*").eq("telegram_id", user_id).gte("event_time", start_date.isoformat()).lte("event_time", end_date.isoformat()).order("event_time", desc=False).execute()
        
        if not events_result.data:
            return f"üìä –û—Ç—á–µ—Ç –∑–∞ {days} –¥–Ω–µ–π\n\n–î–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        events = events_result.data
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º
        daily_stats = {}
        total_hours = 0
        
        for event in events:
            event_date = datetime.fromisoformat(event["event_time"]).date()
            date_str = event_date.strftime("%d.%m.%Y")
            
            if date_str not in daily_stats:
                daily_stats[date_str] = {
                    "arrival": None,
                    "departure": None,
                    "branch_name": None,
                    "hours": 0,
                    "auto_closed": False
                }
            
            if event["event_type"] == "arrival":
                daily_stats[date_str]["arrival"] = datetime.fromisoformat(event["event_time"])
                daily_stats[date_str]["branch_name"] = event["branch_name"]
            elif event["event_type"] == "departure":
                daily_stats[date_str]["departure"] = datetime.fromisoformat(event["event_time"])
                if event.get("work_hours"):
                    daily_stats[date_str]["hours"] = float(event["work_hours"])
                    total_hours += daily_stats[date_str]["hours"]
                if event.get("is_auto_closed"):
                    daily_stats[date_str]["auto_closed"] = True
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = f"üìä –û—Ç—á–µ—Ç –∑–∞ {days} –¥–Ω–µ–π\n"
        report += f"–ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n\n"
        
        if not daily_stats:
            report += "–î–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            return report
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        sorted_dates = sorted(daily_stats.keys(), key=lambda x: datetime.strptime(x, "%d.%m.%Y"), reverse=True)
        
        for date_str in sorted_dates:
            day_data = daily_stats[date_str]
            report += f"üìÖ {date_str}\n"
            
            if day_data["branch_name"]:
                report += f"üè¢ –§–∏–ª–∏–∞–ª: {day_data['branch_name']}\n"
            
            if day_data["arrival"]:
                report += f"üü¢ –ü—Ä–∏—Ö–æ–¥: {day_data['arrival'].strftime('%H:%M')}\n"
            else:
                report += "üü¢ –ü—Ä–∏—Ö–æ–¥: –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω\n"
            
            if day_data["departure"]:
                auto_text = " (–∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ)" if day_data["auto_closed"] else ""
                report += f"üî¥ –£—Ö–æ–¥: {day_data['departure'].strftime('%H:%M')}{auto_text}\n"
            else:
                report += "üî¥ –£—Ö–æ–¥: –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω\n"
            
            if day_data["hours"] > 0:
                report += f"‚è± –ß–∞—Å–æ–≤: {day_data['hours']}\n"
            else:
                report += "‚è± –ß–∞—Å–æ–≤: 0\n"
            
            report += "\n"
        
        report += f"üìà –ò—Ç–æ–≥–æ —á–∞—Å–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: {total_hours}\n"
        report += f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {round(total_hours / len([d for d in daily_stats.values() if d['hours'] > 0]) if any(d['hours'] > 0 for d in daily_stats.values()) else 0, 2)}"
        
        return report
        
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

async def handle_qr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user = update.message.from_user
    user_id = user.id
    first_name = getattr(user, "first_name", "")
    last_name = getattr(user, "last_name", "")
    username = getattr(user, "username", "")
    chat_id = update.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    if text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await handle_statistics(update, context)
        return
    elif text == "üìã –ú–µ–Ω—é":
        await handle_menu(update, context)
        return
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await handle_help(update, context)
        return
    elif text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
        await handle_admin_panel(update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
    if context.user_data.get('waiting_for_developer_message'):
        await handle_developer_message(update, context, text)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    if context.user_data.get('waiting_for_bug_report'):
        await handle_bug_report(update, context, text)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –§–ò–û
    if context.user_data.get('waiting_for_full_name'):
        await handle_full_name_input(update, context, text)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    if context.user_data.get('waiting_for_birth_date'):
        await handle_birth_date_input(update, context, text)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await check_user_authorization(user_id):
        await update.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    if not text.startswith("/qr_"):
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ QR-–∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ.")
        return

    base64_data = text[len("/qr_"):]
    try:
        json_str = base64.urlsafe_b64decode(base64_data.encode()).decode()
        data = json.loads(json_str)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è QR:")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤ QR-–∫–æ–¥–µ (–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ).")
        return

    branch_id = data.get("branch_id")
    branch_name = data.get("branch_name")
    timestamp = data.get("timestamp")
    expires = data.get("expires")
    signature = data.get("signature")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    if not verify_signature(branch_id, timestamp, signature):
        await update.message.reply_text("QR-–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (–æ—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏).")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è (60 —Å–µ–∫—É–Ω–¥) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    now_ts = get_moscow_timestamp()
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–ú–°–ö): —Ç–µ–∫—É—â–µ–µ={now_ts}, –∏—Å—Ç–µ–∫–∞–µ—Ç={expires}, —Ä–∞–∑–Ω–∏—Ü–∞={now_ts - expires}")
    logging.info(f"QR –¥–∞–Ω–Ω—ã–µ: branch_id={branch_id}, timestamp={timestamp}, expires={expires}, signature={signature}")
    
    if now_ts > expires:
        await update.message.reply_text(f"–≠—Ç–æ—Ç QR-–∫–æ–¥ —É–∂–µ –∏—Å—Ç—ë–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–°–ö): {now_ts}, –∫–æ–¥ –∏—Å—Ç—ë–∫: {expires}, —Ä–∞–∑–Ω–∏—Ü–∞: {now_ts - expires} —Å–µ–∫")
        return

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ QR –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data['pending_qr'] = {
        "telegram_id": user_id,
        "first_name": first_name,
        "last_name": last_name,
        "username": username,
        "chat_id": chat_id,
        "branch_id": branch_id,
        "branch_name": branch_name,
        "event_time": get_moscow_time().isoformat(),
        "qr_timestamp": timestamp,
        "signature": signature,
        "raw_json": json.dumps(data, ensure_ascii=False)
    }

    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–∑–º–æ–∂–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    last_event_type = await get_last_event_type(user_id)
    
    if last_event_type is None:
        # –ü–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ - —Ç–æ–ª—å–∫–æ –ø—Ä–∏—Ö–æ–¥
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏—Ö–æ–¥", callback_data="event_arrival_confirm"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="event_arrival_cancel")
            ]
        ])
        await update.message.reply_text(
            f"üìç QR-–∫–æ–¥ —Ñ–∏–ª–∏–∞–ª–∞ '{branch_name}' —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω.\n\n"
            f"üü¢ **–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Ö–æ–¥?**\n"
            f"–§–∏–ª–∏–∞–ª: {branch_name}\n"
            f"–í—Ä–µ–º—è: {get_moscow_time().strftime('%H:%M:%S')}",
            reply_markup=keyboard
        )
    elif last_event_type == "departure":
        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ - —É—Ö–æ–¥, –∑–Ω–∞—á–∏—Ç —Å–ª–µ–¥—É—é—â–µ–µ - –ø—Ä–∏—Ö–æ–¥
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏—Ö–æ–¥", callback_data="event_arrival_confirm"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="event_arrival_cancel")
            ]
        ])
        await update.message.reply_text(
            f"üìç QR-–∫–æ–¥ —Ñ–∏–ª–∏–∞–ª–∞ '{branch_name}' —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω.\n\n"
            f"üü¢ **–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Ö–æ–¥?**\n"
            f"–§–∏–ª–∏–∞–ª: {branch_name}\n"
            f"–í—Ä–µ–º—è: {get_moscow_time().strftime('%H:%M:%S')}",
            reply_markup=keyboard
        )
    elif last_event_type == "arrival":
        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ - –ø—Ä–∏—Ö–æ–¥, –∑–Ω–∞—á–∏—Ç —Å–ª–µ–¥—É—é—â–µ–µ - —É—Ö–æ–¥
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Ñ–∏–ª–∏–∞–ª —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ñ–∏–ª–∏–∞–ª–æ–º –ø—Ä–∏—Ö–æ–¥–∞
        last_arrival_branch = await get_last_arrival_branch(user_id)
        if last_arrival_branch and last_arrival_branch != branch_id:
            # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ –ø—Ä–∏—Ö–æ–¥–∞
            branches_result = supabase.table("branches").select("name").eq("id", last_arrival_branch).execute()
            arrival_branch_name = branches_result.data[0]["name"] if branches_result.data else f"—Ñ–∏–ª–∏–∞–ª {last_arrival_branch}"
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: –í—ã –ø—Ä–∏—à–ª–∏ –≤ —Ñ–∏–ª–∏–∞–ª '{arrival_branch_name}', –ø–æ—ç—Ç–æ–º—É —É—Ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω —Å QR-–∫–æ–¥–∞ —Ç–æ–≥–æ –∂–µ —Ñ–∏–ª–∏–∞–ª–∞.\n\n"
                f"–¢–µ–∫—É—â–∏–π QR-–∫–æ–¥ –æ—Ç —Ñ–∏–ª–∏–∞–ª–∞ '{branch_name}' –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —É—Ö–æ–¥–∞."
            )
            return
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—Ö–æ–¥", callback_data="event_departure_confirm"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="event_departure_cancel")
            ]
        ])
        await update.message.reply_text(
            f"üìç QR-–∫–æ–¥ —Ñ–∏–ª–∏–∞–ª–∞ '{branch_name}' —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω.\n\n"
            f"üî¥ **–û—Ç–º–µ—Ç–∏—Ç—å —É—Ö–æ–¥?**\n"
            f"–§–∏–ª–∏–∞–ª: {branch_name}\n"
            f"–í—Ä–µ–º—è: {get_moscow_time().strftime('%H:%M:%S')}",
            reply_markup=keyboard
        )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å QR-–∫–æ–¥–∞–º–∏"""
    if not update.message.photo:
        return
    
    user_id = update.message.from_user.id
    photo_path = None
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not await check_user_authorization(user_id):
            await update.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_message = await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞...")
        
        # –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —Ñ–æ—Ç–æ (–±–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)
        photo_file = await update.message.photo[-1].get_file()
        
        # –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        import uuid
        import tempfile
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
        temp_dir = tempfile.gettempdir()
        photo_filename = f"temp_qr_{uuid.uuid4().hex[:8]}.jpg"
        photo_path = os.path.join(temp_dir, photo_filename)
        
        # –°–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ
        await photo_file.download_to_drive(photo_path)
        logging.info(f"–§–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ: {photo_path}, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(photo_path)} –±–∞–π—Ç")
        
        # –û—Ç–∫—Ä—ã—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.open(photo_path)
        logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ: {img.size}, —Ä–µ–∂–∏–º: {img.mode}")
        
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if img.mode != 'RGB':
            img = img.convert('RGB')
        
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥
        decoded = decode(img)
        
        if not decoded:
            # –ï—Å–ª–∏ QR –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–ª—É—á—à–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            logging.info("QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —É–ª—É—á—à–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            
            # –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
            from PIL import ImageEnhance
            enhancer = ImageEnhance.Contrast(img)
            img_enhanced = enhancer.enhance(2.0)
            decoded = decode(img_enhanced)
            
            if not decoded:
                # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–≤–µ–ª–∏—á–∏—Ç—å —è—Ä–∫–æ—Å—Ç—å
                enhancer = ImageEnhance.Brightness(img)
                img_bright = enhancer.enhance(1.5)
                decoded = decode(img_bright)
                
                if not decoded:
                    # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä
                    width, height = img.size
                    img_resized = img.resize((width * 2, height * 2), Image.Resampling.LANCZOS)
                    decoded = decode(img_resized)
        
        # –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        try:
            await processing_message.delete()
        except Exception:
            pass
        
        if not decoded:
            await update.message.reply_text(
                "‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Ñ–æ—Ç–æ.\n\n"
                "üì∏ **–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:**\n"
                "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ QR-–∫–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ –∫–∞–¥—Ä–µ\n"
                "‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ –∫–∞–º–µ—Ä—É —Ä–æ–≤–Ω–æ –∏ –Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏\n"
                "‚Ä¢ –û–±–µ—Å–ø–µ—á—å—Ç–µ —Ö–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
                "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞–∑–º—ã—Ç–∏—è - –¥–µ—Ä–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ–ø–æ–¥–≤–∏–∂–Ω–æ\n"
                "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑"
            )
            return
        
        # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞
        qr_data = decoded[0].data.decode("utf-8")
        logging.info(f"QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω: {qr_data[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —ç—Ç–æ –Ω–∞—à QR-–∫–æ–¥
        if qr_data.startswith("/qr_"):
            # –°–æ–∑–¥–∞—Ç—å —Ñ–µ–π–∫–æ–≤—ã–π update –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR-–∫–æ–¥–∞
            class FakeUser:
                def __init__(self, orig):
                    self.id = orig.id
                    self.first_name = getattr(orig, "first_name", "")
                    self.last_name = getattr(orig, "last_name", "")
                    self.username = getattr(orig, "username", "")
            
            class FakeMessage:
                def __init__(self, orig, text):
                    self.text = text
                    self.from_user = FakeUser(orig.from_user)
                    self.chat = orig.chat
                    self.chat_id = orig.chat.id if hasattr(orig.chat, "id") else None
                    self.message_id = orig.message_id
                    self._orig = orig
                
                async def reply_text(self, text, reply_markup=None, parse_mode=None):
                    await self._orig.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
            
            class FakeUpdate:
                def __init__(self, orig, text):
                    self.message = FakeMessage(orig.message, text)
            
            fake_update = FakeUpdate(update, qr_data)
            await handle_qr(fake_update, context)
        else:
            await update.message.reply_text(
                "‚ùå QR-–∫–æ–¥ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–∫–∞–Ω–∏—Ä—É–µ—Ç–µ QR-–∫–æ–¥ —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏."
            )
            
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞:")
        
        # –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        try:
            if 'processing_message' in locals():
                await processing_message.delete()
        except Exception:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞.\n\n"
        
        if "cannot identify image file" in str(e).lower():
            error_message += "–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω."
        elif "no module named" in str(e).lower():
            error_message += "–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        else:
            error_message += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ –µ—â–µ —Ä–∞–∑ —Å –ª—É—á—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º."
        
        await update.message.reply_text(error_message)
        
    finally:
        # –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if photo_path and os.path.exists(photo_path):
            try:
                os.remove(photo_path)
                logging.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {photo_path}")
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {photo_path}: {e}")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.CONTACT, contact_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_qr))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    async def calculate_work_hours(arrival_time, departure_time):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤"""
        try:
            if isinstance(arrival_time, str):
                arrival_time = datetime.fromisoformat(arrival_time.replace('Z', '+00:00'))
            if isinstance(departure_time, str):
                departure_time = datetime.fromisoformat(departure_time.replace('Z', '+00:00'))
            
            # –£–±–∏—Ä–∞–µ–º timezone info –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã—á–∏—Ç–∞–Ω–∏—è
            if arrival_time.tzinfo is not None:
                arrival_time = arrival_time.replace(tzinfo=None)
            if departure_time.tzinfo is not None:
                departure_time = departure_time.replace(tzinfo=None)
            
            delta = departure_time - arrival_time
            hours = delta.total_seconds() / 3600
            return round(hours, 2)
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤:")
            return 0.0

    async def get_last_arrival_event(user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏—Ö–æ–¥–∞ –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —É—Ö–æ–¥–∞"""
        try:
            result = supabase.table("time_events").select("*").eq("telegram_id", user_id).eq("event_type", "arrival").order("event_time", desc=True).limit(1).execute()
            if result.data and len(result.data) > 0:
                arrival_event = result.data[0]
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Å–æ–±—ã—Ç–∏–µ —É—Ö–æ–¥–∞ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞
                departure_result = supabase.table("time_events").select("*").eq("telegram_id", user_id).eq("event_type", "departure").gt("event_time", arrival_event["event_time"]).limit(1).execute()
                if not departure_result.data:
                    return arrival_event
            return None
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞:")
            return None

    # Callback handler –¥–ª—è –∫–Ω–æ–ø–æ–∫
    async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        data = query.data
        user_id = query.from_user.id

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
        if data.startswith("menu_"):
            action = data.split("_")[1]
            if action == "stats":
                keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("üìÖ 3 –¥–Ω—è", callback_data="stats_3"),
                        InlineKeyboardButton("üìÖ 7 –¥–Ω–µ–π", callback_data="stats_7")
                    ],
                    [
                        InlineKeyboardButton("üìÖ 14 –¥–Ω–µ–π", callback_data="stats_14"),
                        InlineKeyboardButton("üìÖ 30 –¥–Ω–µ–π", callback_data="stats_30")
                    ]
                ])
                await query.edit_message_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:", reply_markup=keyboard)
            elif action == "help":
                help_text = """
‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏**

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–∏—Å—Ç–µ–º–æ–π:**

üîπ **–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞:**
   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
   ‚Ä¢ –ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç QR-–∫–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ

üîπ **–õ–æ–≥–∏–∫–∞ –ø—Ä–∏—Ö–æ–¥–∞/—É—Ö–æ–¥–∞:**
   ‚Ä¢ –ü–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ç–æ–ª—å–∫–æ "–ü—Ä–∏—à–µ–ª"
   ‚Ä¢ –ü–æ—Å–ª–µ –ø—Ä–∏—Ö–æ–¥–∞ - —Ç–æ–ª—å–∫–æ "–£—à–µ–ª"
   ‚Ä¢ –£—Ö–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ —Å —Ç–æ–≥–æ –∂–µ —Ñ–∏–ª–∏–∞–ª–∞

üîπ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–Ω—è–º
   ‚Ä¢ –û—Ç–º–µ—Ç–∫–∏ –æ–± –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–∏

üîπ **–ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ:**
   ‚Ä¢ –ï—Å–ª–∏ –Ω–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ —É—Ö–æ–¥ –¥–æ 21:00
   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç –¥–µ–Ω—å
   ‚Ä¢ –ë—É–¥–µ—Ç —É—á—Ç–µ–Ω–æ 8 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ—Ç—á–µ—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
‚Ä¢ üìã –ú–µ–Ω—é - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ ‚ùì –ü–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
                """
                await query.edit_message_text(help_text, parse_mode='Markdown')
            elif action == "status":
                last_event_type = await get_last_event_type(user_id)
                if last_event_type == "arrival":
                    status_text = "üü¢ –°—Ç–∞—Ç—É—Å: –ù–∞ —Ä–∞–±–æ—Ç–µ"
                elif last_event_type == "departure":
                    status_text = "üî¥ –°—Ç–∞—Ç—É—Å: –ù–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ"
                else:
                    status_text = "‚ö™ –°—Ç–∞—Ç—É—Å: –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π"
                await query.edit_message_text(f"üìã –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n\n{status_text}")
            elif action == "refresh":
                # –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é
                last_event_type = await get_last_event_type(user_id)
                if last_event_type == "arrival":
                    status_text = "üü¢ –°—Ç–∞—Ç—É—Å: –ù–∞ —Ä–∞–±–æ—Ç–µ"
                elif last_event_type == "departure":
                    status_text = "üî¥ –°—Ç–∞—Ç—É—Å: –ù–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ"
                else:
                    status_text = "‚ö™ –°—Ç–∞—Ç—É—Å: –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π"
                
                keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_stats"),
                        InlineKeyboardButton("üìã –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="menu_status")
                    ],
                    [
                        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help"),
                        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="menu_refresh")
                    ]
                ])
                await query.edit_message_text(f"üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n{status_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if data.startswith("stats_"):
            days = int(data.split("_")[1])
            report = await generate_statistics_report(user_id, days)
            await query.edit_message_text(report)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏—Ö–æ–¥–∞/—É—Ö–æ–¥–∞
        if data.startswith("event_"):
            parts = data.split("_")
            event_type = parts[1]  # arrival –∏–ª–∏ departure
            action = parts[2]  # confirm –∏–ª–∏ cancel
            
            # –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ QR
            pending_qr = context.user_data.get('pending_qr')
            if not pending_qr:
                await query.edit_message_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∑–∞–Ω–æ–≤–æ.")
                return
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ
            if action == "cancel":
                await query.edit_message_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. QR-–∫–æ–¥ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
                context.user_data.pop('pending_qr', None)
                return
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ
            if action == "confirm":
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                event_data = pending_qr.copy()
                event_data["event_type"] = event_type
                event_data["mood"] = 3  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –ï—Å–ª–∏ —ç—Ç–æ —É—Ö–æ–¥, —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã
            work_hours = None
            work_duration_text = ""
            if event_type == "departure":
                last_arrival = await get_last_arrival_event(user_id)
                if last_arrival:
                    work_hours = await calculate_work_hours(last_arrival["event_time"], event_data["event_time"])
                    event_data["work_hours"] = work_hours
                    
                    # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è
                    arrival_time = datetime.fromisoformat(last_arrival["event_time"])
                    departure_time = datetime.fromisoformat(event_data["event_time"])
                    
                    # –£–±–∏—Ä–∞–µ–º timezone info –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã—á–∏—Ç–∞–Ω–∏—è
                    if arrival_time.tzinfo is not None:
                        arrival_time = arrival_time.replace(tzinfo=None)
                    if departure_time.tzinfo is not None:
                        departure_time = departure_time.replace(tzinfo=None)
                    
                    duration = departure_time - arrival_time
                    
                    hours = int(duration.total_seconds() // 3600)
                    minutes = int((duration.total_seconds() % 3600) // 60)
                    work_duration_text = f"\n‚è± –í—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è: {hours} —á {minutes} –º–∏–Ω"

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑—É
            try:
                res = supabase.table("time_events").insert(event_data).execute()
                if res.data:
                    if event_type == "arrival":
                        message = f"‚úÖ **–ü—Ä–∏—Ö–æ–¥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!**\n\nüìç –§–∏–ª–∏–∞–ª: {pending_qr['branch_name']}\nüïê –í—Ä–µ–º—è: {datetime.fromisoformat(pending_qr['event_time']):%d.%m.%Y %H:%M:%S} –ú–°–ö\n\n‚ú® –•–æ—Ä–æ—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è!"
                    else:
                        # –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è —É—Ö–æ–¥–∞
                        weather_forecast = await get_weather_forecast()
                        
                        hours_text = f"\n‚è± –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Å–æ–≤: {work_hours}" if work_hours else ""
                        message = f"‚úÖ **–£—Ö–æ–¥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!**\n\nüìç –§–∏–ª–∏–∞–ª: {pending_qr['branch_name']}\nüïê –í—Ä–µ–º—è: {datetime.fromisoformat(pending_qr['event_time']):%d.%m.%Y %H:%M:%S} –ú–°–ö{work_duration_text}{hours_text}\n\n{weather_forecast}\n\nüåü –û—Ç–ª–∏—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
                    
                    await query.edit_message_text(message, parse_mode='Markdown')
                    # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    context.user_data.pop('pending_qr', None)
                else:
                    await query.edit_message_text("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            except Exception as e:
                logging.exception("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏—è:")
                await query.edit_message_text("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        if data.startswith("admin_"):
            admin_user = query.from_user
            if admin_user.username != ADMIN_USERNAME:
                await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
                return
            
            action = data.split("_")[1]
            
            if action == "users":
                await handle_admin_users(query, context)
            elif action == "admins":
                await handle_admin_admins(query, context)
            elif action == "stats":
                await handle_admin_system_stats(query, context)
            elif action == "settings":
                await handle_admin_settings(query, context)
            elif action == "dashboard":
                await handle_admin_dashboard(query, context)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        if data.startswith("user_"):
            admin_user = query.from_user
            if admin_user.username != ADMIN_USERNAME:
                await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
                return
            
            parts = data.split("_")
            action = parts[1]
            
            if action == "list":
                page = int(parts[2]) if len(parts) > 2 else 1
                await show_users_list(query, context, page)
            elif action == "promote":
                user_id = int(parts[2])
                await promote_user_to_admin(query, context, user_id)
            elif action == "demote":
                user_id = int(parts[2])
                await demote_admin_to_user(query, context, user_id)
            elif action == "delete":
                user_id = int(parts[2])
                await delete_user(query, context, user_id)
            elif action == "approve":
                user_id = int(parts[2])
                await approve_user(query, context, user_id)
            elif action == "decline":
                user_id = int(parts[2])
                await decline_user(query, context, user_id)
            return


        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
        if data == "contact_developer":
            await query.edit_message_text(
                "üìû **–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º**\n\n"
                "–î–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ @gayazking\n\n"
                "–ò–ª–∏ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∑–¥–µ—Å—å, –∏ –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ—ë —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
                parse_mode='Markdown'
            )
            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
            context.user_data['waiting_for_developer_message'] = True
            return
        
        if data == "report_bug":
            await query.edit_message_text(
                "üêõ **–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ**\n\n"
                "–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ—à–∏–±–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏:\n"
                "‚Ä¢ –ß—Ç–æ –≤—ã –¥–µ–ª–∞–ª–∏ –∫–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞?\n"
                "‚Ä¢ –ö–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ—è–≤–∏–ª–æ—Å—å?\n"
                "‚Ä¢ –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                parse_mode='Markdown'
            )
            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            context.user_data['waiting_for_bug_report'] = True
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if data == "confirm_registration":
            await handle_registration_confirmation(query, context)
            return
        
        if data == "restart_registration":
            await handle_registration_restart(query, context)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
        admin_user = query.from_user
        if admin_user.username != ADMIN_USERNAME:
            await query.edit_message_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∑–∞—è–≤–∫–∏.")
            return
            
        if data.startswith("approve_"):
            user_id = int(data.split("_")[1])
            # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            supabase.table("users").update({"status": "approved"}).eq("telegram_id", user_id).execute()
            # –ü–æ–ª—É—á–∏—Ç—å chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_query = supabase.table("users").select("*").eq("telegram_id", user_id).execute()
            user_data = user_query.data[0] if user_query.data and len(user_query.data) > 0 else None
            if user_data and user_data.get("chat_id"):
                await context.bot.send_message(
                    chat_id=user_data["chat_id"],
                    text="""‚úÖ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–¥–æ–±—Ä–µ–Ω–∞!**

üì± **–ö–∞–∫ –æ—Ç–º–µ—á–∞—Ç—å –ø—Ä–∏—Ö–æ–¥ –∏ —É—Ö–æ–¥:**
1. –ù–∞–π–¥–∏—Ç–µ QR-–∫–æ–¥ –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –≤ –≤–∞—à–µ–º —Ñ–∏–ª–∏–∞–ª–µ
2. –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∫–∞–º–µ—Ä–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–∞
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç

üì∏ **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:**
‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ QR-–∫–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ –∫–∞–¥—Ä–µ  
‚Ä¢ –ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —Ä–∞–∑–º—ã—Ç–∏—è
‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–æ–≤–Ω–æ

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å —Å–≤–æ–π –ø—Ä–∏—Ö–æ–¥ –∏ —É—Ö–æ–¥!""",
                    parse_mode='Markdown'
                )
            await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω.")
        elif data.startswith("decline_"):
            user_id = int(data.split("_")[1])
            supabase.table("users").update({"status": "declined"}).eq("telegram_id", user_id).execute()
            user_query = supabase.table("users").select("*").eq("telegram_id", user_id).execute()
            user_data = user_query.data[0] if user_query.data and len(user_query.data) > 0 else None
            if user_data and user_data.get("chat_id"):
                await context.bot.send_message(
                    chat_id=user_data["chat_id"],
                    text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
            await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

    # –§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    async def handle_admin_users(query, context):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_list_1"),
                InlineKeyboardButton("‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", callback_data="user_pending")
            ],
            [
                InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="user_search"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_stats")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")
            ]
        ])
        
        await query.edit_message_text(
            "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    async def handle_admin_admins(query, context):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
        # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
        admins_result = supabase.table("users").select("*").eq("role", "admin").execute()
        admins_count = len(admins_result.data) if admins_result.data else 0
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="admin_list"),
                InlineKeyboardButton("‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_promote")
            ],
            [
                InlineKeyboardButton("‚ûñ –°–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞", callback_data="admin_demote"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤", callback_data="admin_permissions")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")
            ]
        ])
        
        await query.edit_message_text(
            f"üëë **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏**\n\n–¢–µ–∫—É—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤: {admins_count}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    async def handle_admin_system_stats(query, context):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            users_result = supabase.table("users").select("*").execute()
            events_result = supabase.table("time_events").select("*").gte("event_time", get_moscow_time().replace(hour=0, minute=0, second=0).isoformat()).execute()
            
            total_users = len(users_result.data) if users_result.data else 0
            pending_users = len([u for u in users_result.data if u.get("status") == "pending"]) if users_result.data else 0
            approved_users = len([u for u in users_result.data if u.get("status") == "approved"]) if users_result.data else 0
            admins = len([u for u in users_result.data if u.get("role") in ["admin", "superuser"]]) if users_result.data else 0
            
            # –°–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è
            today_events = len(events_result.data) if events_result.data else 0
            arrivals_today = len([e for e in events_result.data if e.get("event_type") == "arrival"]) if events_result.data else 0
            departures_today = len([e for e in events_result.data if e.get("event_type") == "departure"]) if events_result.data else 0
            currently_at_work = arrivals_today - departures_today
            
            stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö: {approved_users}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {pending_users}
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admins}

üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è:**
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {today_events}
‚Ä¢ –ü—Ä–∏—Ö–æ–¥–æ–≤: {arrivals_today}
‚Ä¢ –£—Ö–æ–¥–æ–≤: {departures_today}
‚Ä¢ –°–µ–π—á–∞—Å –Ω–∞ —Ä–∞–±–æ—Ç–µ: {currently_at_work}

üïê **–í—Ä–µ–º—è:** {get_moscow_time().strftime('%d.%m.%Y %H:%M')} –ú–°–ö
            """
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats"),
                    InlineKeyboardButton("üìà –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞", callback_data="admin_export")
                ],
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats"),
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
                ]
            ])
            
            await query.edit_message_text(stats_text, reply_markup=keyboard, parse_mode='Markdown')
            
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
            await query.edit_message_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã.")

    async def handle_admin_settings(query, context):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏", callback_data="settings_time"),
                InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")
            ],
            [
                InlineKeyboardButton("üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞–º–∏", callback_data="settings_branches"),
                InlineKeyboardButton("üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="settings_security")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")
            ]
        ])
        
        await query.edit_message_text(
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    async def show_users_list(query, context, page=1):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        try:
            per_page = 5
            offset = (page - 1) * per_page
            
            # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            users_result = supabase.table("users").select("*").order("created_at", desc=True).range(offset, offset + per_page - 1).execute()
            total_result = supabase.table("users").select("id", count="exact").execute()
            
            if not users_result.data:
                await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            total_users = total_result.count if hasattr(total_result, 'count') else len(users_result.data)
            total_pages = (total_users + per_page - 1) // per_page
            
            text = f"üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π** (—Å—Ç—Ä. {page}/{total_pages})\n\n"
            
            keyboard_buttons = []
            
            for user in users_result.data:
                status_emoji = {"approved": "‚úÖ", "pending": "‚è≥", "declined": "‚ùå"}.get(user.get("status"), "‚ùì")
                role_emoji = {"superuser": "üëë", "admin": "üë®‚Äçüíº", "user": "üë§"}.get(user.get("role"), "üë§")
                
                name = f"{user.get('first_name', '')} {user.get('last_name', '')}".strip()
                username = user.get('username', '–Ω–µ—Ç')
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
                name_escaped = name.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('`', '\\`').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('.', '\\.').replace('!', '\\!')
                username_escaped = username.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('`', '\\`').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('.', '\\.').replace('!', '\\!')
                
                text += f"{status_emoji} {role_emoji} *{name_escaped}*\n"
                text += f"   @{username_escaped} \\| ID: {user.get('telegram_id')}\n"
                text += f"   –°—Ç–∞—Ç—É—Å: {user.get('status')} \\| –†–æ–ª—å: {user.get('role')}\n\n"
                
                # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_buttons = []
                if user.get("status") == "pending":
                    user_buttons.extend([
                        InlineKeyboardButton("‚úÖ", callback_data=f"user_approve_{user['telegram_id']}"),
                        InlineKeyboardButton("‚ùå", callback_data=f"user_decline_{user['telegram_id']}")
                    ])
                
                if user.get("role") == "user":
                    user_buttons.append(InlineKeyboardButton("üë®‚Äçüíº", callback_data=f"user_promote_{user['telegram_id']}"))
                elif user.get("role") == "admin":
                    user_buttons.append(InlineKeyboardButton("üë§", callback_data=f"user_demote_{user['telegram_id']}"))
                
                user_buttons.append(InlineKeyboardButton(f"üóë {name[:10]}", callback_data=f"user_delete_{user['telegram_id']}"))
                
                if user_buttons:
                    keyboard_buttons.append(user_buttons)
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            nav_buttons = []
            if page > 1:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"user_list_{page-1}"))
            if page < total_pages:
                nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"user_list_{page+1}"))
            
            if nav_buttons:
                keyboard_buttons.append(nav_buttons)
            
            keyboard_buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_users")])
            
            keyboard = InlineKeyboardMarkup(keyboard_buttons)
            await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            await query.edit_message_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    async def promote_user_to_admin(query, context, user_id):
        """–ü–æ–≤—ã—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∞–¥–º–∏–Ω–∞"""
        try:
            # –û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = supabase.table("users").update({
                "role": "admin",
                "can_approve_registrations": True
            }).eq("telegram_id", user_id).execute()
            
            if result.data:
                # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                user_data = result.data[0]
                user_name = f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}".strip()
                
                # –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_data.get("chat_id"):
                    await context.bot.send_message(
                        chat_id=user_data["chat_id"],
                        text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–∏—Å—Ç–µ–º—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
                    )
                
                await query.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞:")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    async def demote_admin_to_user(query, context, user_id):
        """–ü–æ–Ω–∏–∑–∏—Ç—å –∞–¥–º–∏–Ω–∞ –¥–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user_result = supabase.table("users").select("*").eq("telegram_id", user_id).execute()
            if user_result.data and user_result.data[0].get("role") == "superuser":
                await query.edit_message_text("‚ùå –ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ —É —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return
            
            # –û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = supabase.table("users").update({
                "role": "user",
                "can_approve_registrations": False
            }).eq("telegram_id", user_id).execute()
            
            if result.data:
                user_data = result.data[0]
                user_name = f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}".strip()
                
                # –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_data.get("chat_id"):
                    await context.bot.send_message(
                        chat_id=user_data["chat_id"],
                        text="üì¢ –í–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –æ–±—ã—á–Ω—ã–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                    )
                
                await query.edit_message_text(f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} –æ—Ç–æ–∑–≤–∞–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞:")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    async def delete_user(query, context, user_id):
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user_result = supabase.table("users").select("*").eq("telegram_id", user_id).execute()
            if user_result.data and user_result.data[0].get("role") == "superuser":
                await query.edit_message_text("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return
            
            user_data = user_result.data[0] if user_result.data else None
            if not user_data:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            user_name = f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}".strip()
            
            # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            supabase.table("time_events").delete().eq("telegram_id", user_id).execute()
            
            # –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = supabase.table("users").delete().eq("telegram_id", user_id).execute()
            
            if result.data:
                await query.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    async def approve_user(query, context, user_id):
        """–û–¥–æ–±—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            result = supabase.table("users").update({"status": "approved"}).eq("telegram_id", user_id).execute()
            
            if result.data:
                user_data = result.data[0]
                user_name = f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}".strip()
                
                # –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_data.get("chat_id"):
                    await context.bot.send_message(
                        chat_id=user_data["chat_id"],
                        text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥—ã."
                    )
                
                await query.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –æ–¥–æ–±—Ä–µ–Ω.")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    async def decline_user(query, context, user_id):
        """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            result = supabase.table("users").update({"status": "declined"}).eq("telegram_id", user_id).execute()
            
            if result.data:
                user_data = result.data[0]
                user_name = f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}".strip()
                
                # –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_data.get("chat_id"):
                    await context.bot.send_message(
                        chat_id=user_data["chat_id"],
                        text="‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                    )
                
                await query.edit_message_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    async def handle_admin_dashboard(query, context):
        """LIVE Dashboard - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            moscow_now = get_moscow_time()
            today_start = moscow_now.replace(hour=0, minute=0, second=0, microsecond=0)
            
            # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—à–ª–∏ —Å–µ–≥–æ–¥–Ω—è
            arrivals_today = supabase.table("time_events").select("*").eq("event_type", "arrival").gte("event_time", today_start.isoformat()).execute()
            
            # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É—à–ª–∏ —Å–µ–≥–æ–¥–Ω—è
            departures_today = supabase.table("time_events").select("*").eq("event_type", "departure").gte("event_time", today_start.isoformat()).execute()
            
            # –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–ª–∏–∞–ª—ã
            branches_result = supabase.table("branches").select("*").execute()
            branches = {b["id"]: b["name"] for b in branches_result.data} if branches_result.data else {}
            
            # –ê–Ω–∞–ª–∏–∑ –∫—Ç–æ —Å–µ–π—á–∞—Å –Ω–∞ —Ä–∞–±–æ—Ç–µ
            currently_at_work = []
            late_arrivals = []
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏—Ö–æ–¥–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            user_arrivals = {}
            for arrival in arrivals_today.data if arrivals_today.data else []:
                user_id = arrival["telegram_id"]
                if user_id not in user_arrivals or arrival["event_time"] > user_arrivals[user_id]["event_time"]:
                    user_arrivals[user_id] = arrival
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —É—Ö–æ–¥–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            user_departures = {}
            for departure in departures_today.data if departures_today.data else []:
                user_id = departure["telegram_id"]
                if user_id not in user_departures or departure["event_time"] > user_departures[user_id]["event_time"]:
                    user_departures[user_id] = departure
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ç–æ —Å–µ–π—á–∞—Å –Ω–∞ —Ä–∞–±–æ—Ç–µ –∏ –∫—Ç–æ –æ–ø–æ–∑–¥–∞–ª
            for user_id, arrival in user_arrivals.items():
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É—Ö–æ–¥ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞
                if user_id not in user_departures or user_departures[user_id]["event_time"] < arrival["event_time"]:
                    currently_at_work.append(arrival)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–æ–∑–¥–∞–Ω–∏–µ (–ø–æ—Å–ª–µ 9:00)
                    arrival_time = datetime.fromisoformat(arrival["event_time"])
                    work_start = arrival_time.replace(hour=9, minute=0, second=0, microsecond=0)
                    if arrival_time > work_start:
                        late_minutes = int((arrival_time - work_start).total_seconds() / 60)
                        arrival["late_minutes"] = late_minutes
                        late_arrivals.append(arrival)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º
            branch_stats = {}
            for arrival in currently_at_work:
                branch_id = arrival["branch_id"]
                branch_name = branches.get(branch_id, f"–§–∏–ª–∏–∞–ª {branch_id}")
                if branch_name not in branch_stats:
                    branch_stats[branch_name] = 0
                branch_stats[branch_name] += 1
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            dashboard_text = f"""
üìä **LIVE DASHBOARD**
üïê **{moscow_now.strftime('%d.%m.%Y %H:%M')} –ú–°–ö**

üü¢ **–°–µ–π—á–∞—Å –Ω–∞ —Ä–∞–±–æ—Ç–µ: {len(currently_at_work)}**
üî¥ **–û–ø–æ–∑–¥–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {len(late_arrivals)}**
üìà **–í—Å–µ–≥–æ –ø—Ä–∏—Ö–æ–¥–æ–≤: {len(user_arrivals)}**
üìâ **–í—Å–µ–≥–æ —É—Ö–æ–¥–æ–≤: {len(user_departures)}**

üè¢ **–ü–æ —Ñ–∏–ª–∏–∞–ª–∞–º:**
"""
            
            for branch_name, count in branch_stats.items():
                dashboard_text += f"‚Ä¢ {branch_name}: {count} —á–µ–ª.\n"
            
            if not branch_stats:
                dashboard_text += "‚Ä¢ –ù–∏–∫–æ–≥–æ –Ω–µ—Ç –Ω–∞ —Ä–∞–±–æ—Ç–µ\n"
            
            dashboard_text += "\n‚ö†Ô∏è **–û–ø–æ–∑–¥–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è:**\n"
            
            if late_arrivals:
                for late in sorted(late_arrivals, key=lambda x: x["late_minutes"], reverse=True)[:5]:
                    name = f"{late.get('first_name', '')} {late.get('last_name', '')}".strip()
                    branch_name = branches.get(late["branch_id"], f"–§–∏–ª–∏–∞–ª {late['branch_id']}")
                    arrival_time = datetime.fromisoformat(late["event_time"])
                    dashboard_text += f"‚Ä¢ {name} - {late['late_minutes']} –º–∏–Ω\n"
                    dashboard_text += f"  {branch_name}, {arrival_time.strftime('%H:%M')}\n"
                
                if len(late_arrivals) > 5:
                    dashboard_text += f"‚Ä¢ ... –∏ –µ—â–µ {len(late_arrivals) - 5} –æ–ø–æ–∑–¥–∞–Ω–∏–π\n"
            else:
                dashboard_text += "‚Ä¢ –û–ø–æ–∑–¥–∞–Ω–∏–π –Ω–µ—Ç üéâ\n"
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            dashboard_text += "\nüìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:**\n"
            all_events = []
            if arrivals_today.data:
                all_events.extend(arrivals_today.data)
            if departures_today.data:
                all_events.extend(departures_today.data)
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
            all_events.sort(key=lambda x: x["event_time"], reverse=True)
            
            for event in all_events[:5]:
                name = f"{event.get('first_name', '')} {event.get('last_name', '')}".strip()
                branch_name = branches.get(event["branch_id"], f"–§–∏–ª–∏–∞–ª {event['branch_id']}")
                event_time = datetime.fromisoformat(event["event_time"])
                event_emoji = "üü¢" if event["event_type"] == "arrival" else "üî¥"
                event_text = "–ø—Ä–∏—à–µ–ª" if event["event_type"] == "arrival" else "—É—à–µ–ª"
                dashboard_text += f"{event_emoji} {name} {event_text}\n"
                dashboard_text += f"  {branch_name}, {event_time.strftime('%H:%M')}\n"
            
            if not all_events:
                dashboard_text += "‚Ä¢ –°–æ–±—ã—Ç–∏–π —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç\n"
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_dashboard"),
                    InlineKeyboardButton("üìä –î–µ—Ç–∞–ª–∏", callback_data="dashboard_details")
                ],
                [
                    InlineKeyboardButton("‚ö†Ô∏è –ê–ª–µ—Ä—Ç—ã", callback_data="dashboard_alerts"),
                    InlineKeyboardButton("üìà –≠–∫—Å–ø–æ—Ä—Ç", callback_data="dashboard_export")
                ],
                [
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")
                ]
            ])
            
            await query.edit_message_text(dashboard_text, reply_markup=keyboard, parse_mode='Markdown')
            
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ LIVE Dashboard:")
            await query.edit_message_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ LIVE Dashboard. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –§—É–Ω–∫—Ü–∏–∏ —Ç–∞–º–∞–≥–æ—á–∏
    async def get_or_create_tamagotchi(user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–º–∞–≥–æ—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            result = supabase.table("tamagotchi").select("*").eq("telegram_id", user_id).execute()
            if result.data:
                return result.data[0]
            else:
                # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Ç–∞–º–∞–≥–æ—á–∏
                new_tamagotchi = {
                    "telegram_id": user_id,
                    "name": "–¢–∞–º–∞–≥–æ—á–∏",
                    "hunger": 100,
                    "happiness": 100,
                    "health": 100,
                    "level": 1,
                    "experience": 0,
                    "is_alive": True,
                    "last_fed": get_moscow_time().isoformat()
                }
                create_result = supabase.table("tamagotchi").insert(new_tamagotchi).execute()
                return create_result.data[0] if create_result.data else new_tamagotchi
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–º–∞–≥–æ—á–∏:")
            return None

    async def update_tamagotchi_stats(user_id):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞–º–∞–≥–æ—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            tamagotchi = await get_or_create_tamagotchi(user_id)
            if not tamagotchi:
                return None
            
            # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
            last_fed = datetime.fromisoformat(tamagotchi["last_fed"])
            if last_fed.tzinfo is not None:
                last_fed = last_fed.replace(tzinfo=None)
            
            now = get_moscow_time().replace(tzinfo=None)
            hours_since_fed = (now - last_fed).total_seconds() / 3600
            
            # –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            hunger = max(0, tamagotchi["hunger"] - int(hours_since_fed * 5))  # -5 –∑–∞ —á–∞—Å
            happiness = max(0, tamagotchi["happiness"] - int(hours_since_fed * 3))  # -3 –∑–∞ —á–∞—Å
            health = max(0, tamagotchi["health"] - int(hours_since_fed * 2))  # -2 –∑–∞ —á–∞—Å
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–º–µ—Ä—Ç—å (3 –¥–Ω—è –±–µ–∑ –∫–æ—Ä–º–ª–µ–Ω–∏—è = 72 —á–∞—Å–∞)
            is_alive = hours_since_fed < 72
            
            # –û–±–Ω–æ–≤–∏—Ç—å –≤ –±–∞–∑–µ
            updated_data = {
                "hunger": hunger,
                "happiness": happiness,
                "health": health,
                "is_alive": is_alive,
                "updated_at": now.isoformat()
            }
            
            supabase.table("tamagotchi").update(updated_data).eq("telegram_id", user_id).execute()
            
            # –í–µ—Ä–Ω—É—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            tamagotchi.update(updated_data)
            return tamagotchi
            
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–º–∞–≥–æ—á–∏:")
            return None

    async def feed_tamagotchi(user_id):
        """–ü–æ–∫–æ—Ä–º–∏—Ç—å —Ç–∞–º–∞–≥–æ—á–∏ (–ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ QR)"""
        try:
            tamagotchi = await update_tamagotchi_stats(user_id)
            if not tamagotchi:
                return None, None
            
            # –ï—Å–ª–∏ –º–µ—Ä—Ç–≤, –Ω–µ –∫–æ—Ä–º–∏–º
            if not tamagotchi["is_alive"]:
                return tamagotchi, await get_tamagotchi_message("dead")
            
            # –ü–æ–∫–æ—Ä–º–∏—Ç—å
            new_hunger = min(100, tamagotchi["hunger"] + 25)
            new_happiness = min(100, tamagotchi["happiness"] + 20)
            new_health = min(100, tamagotchi["health"] + 15)
            new_experience = tamagotchi["experience"] + 10
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
            new_level = tamagotchi["level"]
            if new_experience >= new_level * 100:
                new_level += 1
                new_experience = 0
            
            # –û–±–Ω–æ–≤–∏—Ç—å –≤ –±–∞–∑–µ
            updated_data = {
                "hunger": new_hunger,
                "happiness": new_happiness,
                "health": new_health,
                "experience": new_experience,
                "level": new_level,
                "last_fed": get_moscow_time().isoformat(),
                "updated_at": get_moscow_time().isoformat()
            }
            
            supabase.table("tamagotchi").update(updated_data).eq("telegram_id", user_id).execute()
            
            # –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            tamagotchi.update(updated_data)
            
            # –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            if new_level > tamagotchi["level"]:
                message = await get_tamagotchi_message("happy")
            else:
                message = await get_tamagotchi_message("feed")
            
            return tamagotchi, message
            
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è —Ç–∞–º–∞–≥–æ—á–∏:")
            return None, None

    async def get_tamagotchi_message(message_type):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–º–∞–≥–æ—á–∏"""
        try:
            result = supabase.table("tamagotchi_messages").select("*").eq("message_type", message_type).execute()
            if result.data:
                import random
                message_data = random.choice(result.data)
                return f"{message_data['emoji']} {message_data['message']}"
            return "üêæ –¢–∞–º–∞–≥–æ—á–∏ —á—Ç–æ-—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç..."
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∞–º–∞–≥–æ—á–∏:")
            return "üêæ –¢–∞–º–∞–≥–æ—á–∏ –º–æ–ª—á–∏—Ç..."

    async def get_tamagotchi_status(user_id):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–∞–º–∞–≥–æ—á–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            tamagotchi = await update_tamagotchi_stats(user_id)
            if not tamagotchi:
                return "üêæ –¢–∞–º–∞–≥–æ—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            if not tamagotchi["is_alive"]:
                return f"üíÄ {tamagotchi['name']} (–£—Ä–æ–≤–µ–Ω—å {tamagotchi['level']}) - –ú–ï–†–¢–í\n‚ö∞Ô∏è –í–æ—Å–∫—Ä–µ—Å–∏ –º–µ–Ω—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º QR!"
            
            # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            hunger = tamagotchi["hunger"]
            happiness = tamagotchi["happiness"]
            health = tamagotchi["health"]
            
            status_emoji = "üòÑ"
            if hunger < 30 or happiness < 30 or health < 30:
                status_emoji = "üò∞"
            elif hunger < 50 or happiness < 50 or health < 50:
                status_emoji = "üòê"
            
            status_text = f"""
{status_emoji} **{tamagotchi['name']}** (–£—Ä–æ–≤–µ–Ω—å {tamagotchi['level']})
üçé –°—ã—Ç–æ—Å—Ç—å: {hunger}/100
üòä –°—á–∞—Å—Ç—å–µ: {happiness}/100
‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {health}/100
‚≠ê –û–ø—ã—Ç: {tamagotchi['experience']}/{tamagotchi['level'] * 100}
            """.strip()
            
            return status_text
            
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–∞–º–∞–≥–æ—á–∏:")
            return "üêæ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–∞–º–∞–≥–æ—á–∏"

    async def revive_tamagotchi(user_id):
        """–í–æ—Å–∫—Ä–µ—Å–∏—Ç—å —Ç–∞–º–∞–≥–æ—á–∏"""
        try:
            updated_data = {
                "hunger": 50,
                "happiness": 50,
                "health": 50,
                "is_alive": True,
                "last_fed": get_moscow_time().isoformat(),
                "updated_at": get_moscow_time().isoformat()
            }
            
            supabase.table("tamagotchi").update(updated_data).eq("telegram_id", user_id).execute()
            message = await get_tamagotchi_message("revive")
            return message
            
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏—è —Ç–∞–º–∞–≥–æ—á–∏:")
            return "üêæ –û—à–∏–±–∫–∞ –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏—è"

    async def get_weather_forecast():
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –ö–∞–∑–∞–Ω–∏"""
        try:
            import aiohttp
            import asyncio
            
            # --- OpenWeatherMap ---------------------------------
            api_key = os.getenv("OPENWEATHER_API_KEY") or ""
            city = "Kazan,RU"

            # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—Ä–∞–∑—É —Å–æ–æ–±—â–∞–µ–º –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
            if not api_key:
                tomorrow = (datetime.now() + timedelta(days=1)).strftime('%d.%m')
                return f"üå§ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {tomorrow}: —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç API-–∫–ª—é—á–∞)"
            
            async with aiohttp.ClientSession() as session:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={api_key}&units=metric&lang=ru"
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        # –ù–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                        tomorrow = datetime.now() + timedelta(days=1)
                        tomorrow_date = tomorrow.strftime('%Y-%m-%d')
                        
                        tomorrow_forecasts = []
                        for item in data['list']:
                            if tomorrow_date in item['dt_txt']:
                                tomorrow_forecasts.append(item)
                        
                        if tomorrow_forecasts:
                            # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
                            temps = [item['main']['temp'] for item in tomorrow_forecasts]
                            feels_like = [item['main']['feels_like'] for item in tomorrow_forecasts]
                            rain_periods = []
                            
                            for item in tomorrow_forecasts:
                                if 'rain' in item or item['weather'][0]['main'] in ['Rain', 'Drizzle']:
                                    time_str = item['dt_txt'].split(' ')[1][:5]
                                    rain_periods.append(time_str)
                            
                            min_temp = int(min(temps))
                            max_temp = int(max(temps))
                            avg_feels = int(sum(feels_like) / len(feels_like))
                            
                            # --- –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–æ—Å—Ö–æ–¥–∞/–∑–∞–∫–∞—Ç–∞ ---
                            try:
                                lat = data["city"]["coord"]["lat"]
                                lon = data["city"]["coord"]["lon"]
                                oc_url = f"https://api.openweathermap.org/data/3.0/onecall?lat={lat}&lon={lon}&exclude=hourly,minutely,current,alerts&appid={api_key}"
                                async with session.get(oc_url) as resp2:
                                    if resp2.status == 200:
                                        oc = await resp2.json()
                                        tz_offset = oc.get("timezone_offset", 0)
                                        daily = oc.get("daily", [])
                                        if len(daily) > 1:
                                            sr_ts = daily[1]["sunrise"] + tz_offset
                                            ss_ts = daily[1]["sunset"] + tz_offset
                                            sunrise = datetime.utcfromtimestamp(sr_ts).strftime("%H:%M")
                                            sunset  = datetime.utcfromtimestamp(ss_ts).strftime("%H:%M")
                                        else:
                                            sunrise = sunset = "--"
                                    else:
                                        sunrise = sunset = "--"
                            except Exception:
                                sunrise = sunset = "--"
                            
                            rain_text = "–±–µ–∑ –æ—Å–∞–¥–∫–æ–≤"
                            if rain_periods:
                                rain_text = f"–≤–æ–∑–º–æ–∂–Ω—ã —Å {rain_periods[0]} –¥–æ {rain_periods[-1]}"
                            
                            return f"""
üå§ **–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m')})**
üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {min_temp}¬∞C...{max_temp}¬∞C
üå° –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {avg_feels}¬∞C
üåß –û—Å–∞–¥–∫–∏: {rain_text}
üåÖ –í–æ—Å—Ö–æ–¥: {sunrise}
üåá –ó–∞–∫–∞—Ç: {sunset}

*–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã OpenWeatherMap*
                            """.strip()
                        
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã:")

        # –ü–∞–¥—ë–∂–Ω—ã–π fallback –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
        tomorrow = (datetime.now() + timedelta(days=1)).strftime('%d.%m')
        return f"üå§ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {tomorrow}: —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∏ –æ–± –æ—à–∏–±–∫–∞—Ö
    async def handle_developer_message(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"""
        try:
            user = update.message.from_user
            user_id = user.id
            first_name = getattr(user, "first_name", "")
            last_name = getattr(user, "last_name", "")
            username = getattr(user, "username", "")
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            message_data = {
                "telegram_id": user_id,
                "first_name": first_name,
                "last_name": last_name,
                "username": username,
                "message_type": "developer_contact",
                "message_text": text,
                "created_at": get_moscow_time().isoformat(),
                "status": "new"
            }
            
            supabase.table("feedback_messages").insert(message_data).execute()
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É
            admin_query = supabase.table("users").select("*").in_("role", ["admin", "superuser"]).execute()
            
            for admin in admin_query.data if admin_query.data else []:
                if admin.get("chat_id"):
                    try:
                        await context.bot.send_message(
                            chat_id=admin["chat_id"],
                            text=f"""üìû **–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É**

üë§ **–û—Ç:** {first_name} {last_name} (@{username})
üÜî **ID:** {user_id}
üìù **–°–æ–æ–±—â–µ–Ω–∏–µ:**
{text}

üïê **–í—Ä–µ–º—è:** {get_moscow_time().strftime('%d.%m.%Y %H:%M')} –ú–°–ö""",
                            parse_mode='Markdown'
                        )
                    except Exception as e:
                        logging.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin['telegram_id']}:")
            
            await update.message.reply_text(
                "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!\n\n"
                "–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                parse_mode='Markdown'
            )
            
            # –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('waiting_for_developer_message', None)
            
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É:")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    async def handle_bug_report(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        try:
            user = update.message.from_user
            user_id = user.id
            first_name = getattr(user, "first_name", "")
            last_name = getattr(user, "last_name", "")
            username = getattr(user, "username", "")
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            bug_data = {
                "telegram_id": user_id,
                "first_name": first_name,
                "last_name": last_name,
                "username": username,
                "message_type": "bug_report",
                "message_text": text,
                "created_at": get_moscow_time().isoformat(),
                "status": "new",
                "priority": "medium"
            }
            
            supabase.table("feedback_messages").insert(bug_data).execute()
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É
            admin_query = supabase.table("users").select("*").in_("role", ["admin", "superuser"]).execute()
            
            for admin in admin_query.data if admin_query.data else []:
                if admin.get("chat_id"):
                    try:
                        await context.bot.send_message(
                            chat_id=admin["chat_id"],
                            text=f"""üêõ **–°–û–û–ë–©–ï–ù–ò–ï –û–ë –û–®–ò–ë–ö–ï**

üë§ **–û—Ç:** {first_name} {last_name} (@{username})
üÜî **ID:** {user_id}
üêõ **–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏:**
{text}

üïê **–í—Ä–µ–º—è:** {get_moscow_time().strftime('%d.%m.%Y %H:%M')} –ú–°–ö
‚ö†Ô∏è **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** –°—Ä–µ–¥–Ω–∏–π""",
                            parse_mode='Markdown'
                        )
                    except Exception as e:
                        logging.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É {admin['telegram_id']}:")
            
            await update.message.reply_text(
                "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
                "üîß –ú—ã –∏—Å–ø—Ä–∞–≤–∏–º —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                "üìß –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –≤ —É–ª—É—á—à–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã! üôè",
                parse_mode='Markdown'
            )
            
            # –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
            context.user_data.pop('waiting_for_bug_report', None)
            
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    app.add_handler(MessageHandler(filters.CONTACT, contact_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_qr))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(CommandHandler("start", start))
    from telegram.ext import CallbackQueryHandler
    app.add_handler(CallbackQueryHandler(callback_handler))

    app.run_polling()
