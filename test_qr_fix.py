#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å QR –∫–æ–¥–∞–º–∏
"""

import os
import json
import base64
import hmac
import hashlib
from datetime import datetime, timezone, timedelta

# –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)
MOSCOW_TZ = timezone(timedelta(hours=3))

def get_moscow_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ"""
    return datetime.now(MOSCOW_TZ)

def get_moscow_timestamp():
    """–ü–æ–ª—É—á–∏—Ç—å timestamp –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    return int(get_moscow_time().timestamp())

# –°–µ–∫—Ä–µ—Ç –∏–∑ .env
QR_SECRET = "qr_secret_2025"

def generate_signature(branch_id, time_window):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ (–∫–∞–∫ –≤ –≤–µ–±-—á–∞—Å—Ç–∏)"""
    msg = f"{branch_id}:{time_window}".encode()
    secret = QR_SECRET.encode()
    return hmac.new(secret, msg, hashlib.sha256).hexdigest()

def verify_signature(branch_id, time_window, signature):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ (–∫–∞–∫ –≤ –±–æ—Ç–µ)"""
    msg = f"{branch_id}:{time_window}".encode()
    secret = QR_SECRET.encode()
    expected = hmac.new(secret, msg, hashlib.sha256).hexdigest()
    return hmac.compare_digest(signature, expected)

def generate_qr_payload(branch_id, branch_name):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR payload (–∫–∞–∫ –≤ –≤–µ–±-—á–∞—Å—Ç–∏)"""
    timestamp = get_moscow_timestamp()
    time_window = timestamp // 30  # –û–∫–Ω–æ 30 —Å–µ–∫—É–Ω–¥
    expires = timestamp + 60
    signature = generate_signature(branch_id, time_window)
    payload = {
        "branch_id": branch_id,
        "branch_name": branch_name,
        "timestamp": time_window,  # ‚Üê –í–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º time_window –∫–∞–∫ timestamp
        "expires": expires,
        "signature": signature,
    }
    json_str = json.dumps(payload, ensure_ascii=False)
    base64_str = base64.urlsafe_b64encode(json_str.encode()).decode()
    return base64_str, payload

def test_qr_verification():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ QR –∫–æ–¥–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è QR –∫–æ–¥–æ–≤...")
    print("=" * 50)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–∞–∫ –≤–µ–±-—á–∞—Å—Ç—å
    branch_id = 1
    branch_name = "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª"
    
    print(f"üìç –§–∏–ª–∏–∞–ª: {branch_name} (ID: {branch_id})")
    
    qr_data, payload = generate_qr_payload(branch_id, branch_name)
    print(f"üîó QR –¥–∞–Ω–Ω—ã–µ: /qr_{qr_data}")
    print(f"üì¶ Payload: {payload}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –±–æ—Ç
    timestamp = payload.get("timestamp")
    signature = payload.get("signature")
    expires = payload.get("expires")
    
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏:")
    print(f"   branch_id: {branch_id}")
    print(f"   timestamp (time_window): {timestamp}")
    print(f"   signature: {signature}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    is_valid = verify_signature(branch_id, timestamp, signature)
    print(f"   ‚úÖ –ü–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞: {is_valid}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    now_ts = get_moscow_timestamp()
    is_not_expired = now_ts <= expires
    print(f"\n‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏:")
    print(f"   –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now_ts}")
    print(f"   –ò—Å—Ç–µ–∫–∞–µ—Ç: {expires}")
    print(f"   –†–∞–∑–Ω–∏—Ü–∞: {now_ts - expires} —Å–µ–∫")
    print(f"   ‚úÖ –ù–µ –∏—Å—Ç—ë–∫: {is_not_expired}")
    
    # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    success = is_valid and is_not_expired
    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: {'‚úÖ –£–°–ü–ï–•' if success else '‚ùå –û–®–ò–ë–ö–ê'}")
    
    if success:
        print("üéâ QR –∫–æ–¥ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç –±–æ—Ç–æ–º!")
    else:
        print("üí• QR –∫–æ–¥ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω –±–æ—Ç–æ–º!")
    
    return success

def test_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤...")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å
    print("1Ô∏è‚É£ –¢–µ—Å—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏:")
    is_valid = verify_signature(1, 12345, "wrong_signature")
    print(f"   ‚úÖ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {not is_valid}")
    
    # –¢–µ—Å—Ç 2: –†–∞–∑–Ω—ã–µ branch_id
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö branch_id:")
    time_window = get_moscow_timestamp() // 30
    signature = generate_signature(1, time_window)
    is_valid = verify_signature(2, time_window, signature)  # –î—Ä—É–≥–æ–π branch_id
    print(f"   ‚úÖ –ü–æ–¥–ø–∏—Å—å –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {not is_valid}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏:")
    signature = generate_signature(1, time_window)
    is_valid = verify_signature(1, time_window, signature)
    print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –ø—Ä–∏–Ω—è—Ç–∞: {is_valid}")
    
    return True

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è QR –∫–æ–¥–æ–≤")
    print("=" * 60)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    main_test = test_qr_verification()
    
    # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
    edge_test = test_edge_cases()
    
    print("\n" + "=" * 60)
    if main_test and edge_test:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –¢–ï–°–¢–ê–•")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
